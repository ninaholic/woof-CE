#!/bin/bash
# new for fatdog style kernel
# we need udev >= 176

export LANG=C #faster.

CDRECORD='cdrecord'
MKISOFS='mkisofs'
if [ "`which xorriso`" != "" ];then # use xorriso if it is installed
 CDRECORD='xorrecord'
 MKISOFS='xorrisofs'
fi
export CDRECORD MKISOFS

. ./_00func
. ./_00build.conf
export PTHEME #build.conf - woof-code/rootfs-packages/ptheme
KERNEL_REPO_URL=${KERNEL_REPO_URL:-http://distro.ibiblio.org/puppylinux/huge_kernels} #can change var

. ./DISTRO_SPECS      #this has DISTRO_VERSION.

source_compat_repos  # ./DISTRO_COMPAT_REPOS-
source_pkgs_specs    # ./DISTRO_PKGS_SPECS-
. ./PKGS_MANAGEMENT  #101013 want variable PKG_PREFER_OLDER.
. ./DISTRO_PET_REPOS #120506 want variable PACKAGELISTS_PET_ORDER
source_woofmergevars # ./WOOFMERGEVARS

set_layer_type  # aufs or overlay
set_archdir_var # ex: ARCHDIR=x86_64-linux-gnu

#64 bit
[ "$WOOF_TARGETARCH" = "x86_64" ] && lsuffix=64 || lsuffix= #140121 for 64bit ${lsuffix}

#the files that have compatible-distro pkg docs (these were downloaded by 0setup)...
PKGLISTS_COMPAT="`echo "$PKG_DOCS_DISTRO_COMPAT" | tr ' ' '\n' | cut -f 3 -d '|' | tr '\n' ' ' | sed -e 's% $%%'`" #see file DISTRO_PKGS_SPECS-ubuntu
#...format ex: 'Packages-ubuntu-intrepid-main Packages-ubuntu-intrepid-universe'

WKGDIR="`pwd`"

echo
echo "Do you want to create a live-CD .iso file, which is the normal choice for a
PC-compatible target, or is your target an SD-card for an ARM-based board?
In the latter case, you would already have downloaded an SD-card skeleton image
file into folder 'sd-skeleton-images' (done by script '1download') -- if there
is no image file in that folder, you cannot choose the SD-card option."
echo "WARNING: for the SD-card option, you must have enough free space in the
current directory ${WKGDIR}/sandbox3
to expand the SD image file, typically 4GB."
echo "Press ENTER only for normal .iso creation, or "
echo -n "any other printable character for SD-card: "
read SDFLAG
#120714 ask what type of arm board...
if [ "$SDFLAG" != "" ];then
 echo "...ok, chose sd-card image."
 echo
 echo "Type number of board that you are building for: 
1 Raspberry Pi
2 Mele A1000 or A2000 (or other A10 board)
3 ODROID-X (or other Exynos 4412 board)"
 read boardnum
 case $boardnum in
  1) BOOT_BOARD='raspi' ;;
  2) BOOT_BOARD='mele' ;;
  *) BOOT_BOARD='odroidx' ;;
 esac
 echo "...you chose $BOOT_BOARD"
fi
if [ "$SDFLAG" != "" ];then
 #override module choices, as kernel is built customized to particular hardware...
 echo -n #-------
fi

#w003 remove comments from PKGS_SPECS_TABLE
PKGS_SPECS_TABLE="`echo "$PKGS_SPECS_TABLE" | grep -v '^#'`"

mkdir -p sandbox3

export DISTRO_NAME
export DISTRO_VERSION
export DISTRO_COMPAT_VERSION

echo

#-- always assume mksquashfs4+ --
MKSQUASHFS=mksquashfs #use running system's 140619

# new traditional names...
PUPPYSFS="puppy_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
ZDRVSFS="zdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
FDRVSFS="fdrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
ADRVSFS="adrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
YDRVSFS="ydrv_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
DEVXSFS="devx_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"

#now build rootfs-complete, the main filesystem...
echo
echo "Now building sandbox3/rootfs-complete, with the complete filesystem..."
echo '#!/bin/sh' > sandbox3/pinstall.sh
rm -rf sandbox3/rootfs-complete
rm -rf sandbox3/devx
sync
mkdir sandbox3/rootfs-complete
mkdir sandbox3/rootfs-complete/etc
mkdir sandbox3/devx
cp DISTRO_SPECS sandbox3/rootfs-complete/etc/

#copy the skeleton...
cp -a rootfs-skeleton/* sandbox3/rootfs-complete/
cat sandbox3/rootfs-complete/pinstall.sh >> sandbox3/pinstall.sh
# extra packages
echo
echo "If you know what packages you want included from rootfs-packages
you can bypass the checkbox GUI by renaming 

'support/rootfs-packages.conf-backup'

to

'support/rootfs-packages.conf'

and edit it to include your customised package list.

You can CTRL-C out of this script and try it right now if you wish
or hit Enter/Return to continue."

read carry_on

CHOICE=/tmp/rootfs_choice$$
if [ ! -f support/rootfs-packages.conf ];then
	for d in $(ls rootfs-packages)
	do  
	       state=true
	       LIST="sfs_load|pfilesearch|pfind|firewall_ng"
	       echo "$d" | egrep -q "$LIST" && def=true || def=false 
	       case "$d" in
	        mscw|sfs_load|pgprs|change_kernels) def=true ;;
			lxde_menu_support)
				grep -q 'yes|pcmanfm' DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} && def=true
				;;
			jwm_config|ptheme|ptheme_buntoo)
				if grep 'jwmconfig' DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} |\
				grep -q '^yes' ;then
					state=false #cant choose them if jwmconfig is in specs.
				else
					def=true
				fi
				;;
			wallpaper)
				if grep -q 'yes|wallpaper' DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION};then
					state=false # don't overwrite user chosen specs
					def=false
				else 
					def=true
				fi
				;;
			pmusic)
				if grep -q 'yes|ffmpeg' DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION};then
					def=true
				else 
					state=false
					def=false
				fi # depends ffmpeg
				;;		
			pmirror)
				if grep -q 'yes|mirdir' DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION};then
					def=true
				else 
					state=false
					def=false
				fi #depends mirdir
				;;		
			[f|F]risbee)
				if grep -q 'yes|wpa_supplicant' DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION};then
					if grep -E "[f|F]risbee" DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} |\
					grep -q '^yes' ;then
						state=false # don't overwrite user chosen specs
						def=false
					else
						def=true
					fi
				else 
					state=false
					def=false
				fi #depends wpa_supplicant
				;;
			*)
				if grep "|${d}" DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION} |\
				grep -q '^yes' ;then
					state=false # don't overwrite user chosen specs
					def=false
				fi
				;;
				#### TO DO, pburn. Different distros have different generic names.	
		   esac
	       CBOXES="$CBOXES""<hbox space-expand=\"true\" space-fill=\"true\">
			<checkbox>
				<label>$d</label>
				<default>$def</default>
				<variable>$d</variable>
				<sensitive>$state</sensitive>
			</checkbox>
		</hbox>"
	done
		
	export GUIC="<window title=\"Choose extra packages\">
		<vbox>
			<hbox>
				<text>
					<label>Here you can choose what extra packages to install. It is recommended that you leave the checked boxes checked as these are usually dependencies of installed programs in puppy. If the checkbox for a program is disabled then it means that a coressponding program is in DISTRO_PKGS_SPECS-${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}</label>
				</text>
			</hbox>
			<hbox space-expand=\"true\" space-fill=\"true\">	
				<text use-markup=\"true\">
					<label>\"<b>These are maintained as part of woof.</b>\"</label>
				</text>
			</hbox>
			<vbox scrollable=\"true\" height=\"160\" width=\"380\">
				$CBOXES
			</vbox>
			<hbox><button ok></button></hbox>
		</vbox>
	</window>"
	gtkdialog -p GUIC -c > $CHOICE
else
	cp -a support/rootfs-packages.conf $CHOICE
	EXIT=OK
fi
. $CHOICE
[ -f /tmp/rootfs-packages.specs ] && rm /tmp/rootfs-packages.specs # in case we baled out on last build
[ -f /tmp/rootfs_pkgs_pinstall.sh ] && rm /tmp/rootfs_pkgs_pinstall.sh # this needs doing anyway
if [ "$EXIT" = "OK" ];then
	while read line
	do 
		if echo $line|grep -q "true" ;then
			echo "copying ${line%%=*}"
			cp -a rootfs-packages/${line%%=*}/* sandbox3/rootfs-complete/
			if [ -f rootfs-packages/${line%%=*}/pinstall.sh ];then
				if grep -qw 'exit' rootfs-packages/${line%%=*}/pinstall.sh;then continue
				else
					if grep -q 'poor man' rootfs-packages/${line%%=*}/pinstall.sh;then # ptheme must go last
						cat rootfs-packages/${line%%=*}/pinstall.sh > /tmp/rootfs_pkgs_pinstall_ptheme.sh
					else
						cat rootfs-packages/${line%%=*}/pinstall.sh >> /tmp/rootfs_pkgs_pinstall.sh
					fi
				fi
			fi
			cat sandbox3/rootfs-complete/pet.specs >> /tmp/rootfs-packages.specs
		else
			continue
		fi
	done < $CHOICE
	cat /tmp/rootfs_pkgs_pinstall_ptheme.sh >> /tmp/rootfs_pkgs_pinstall.sh
fi
rm $CHOICE
#creates devx-only-installed-packages.
./support/findwoofinstalledpkgs # moved to here so we can add /tmp/rootfs-packages.specs

### new {a,f,y}drv stuff - this creates a full 'woof-installed-packages' in {a,y}drv and subtracts the
# {a,y}drv installed packages from the the full 'woof-installed-packages' that goes to the main sfs.
if [ "$(echo $ADRV_INC)" != "" -o "$(echo $FDRV_INC)" != "" -o "$(echo $YDRV_INC)" != "" ];then 
	sync
	fields="${ADRV_INC}:${FDRV_INC}:${YDRV_INC}:)"
	IFS=':' read -a field <<< $fields
	fcnt=0
	for dtype in a f y; do
		[ -d sandbox3/${dtype}drv ] && rm -rf sandbox3/${dtype}drv
		[ "$dtype" = 'a' -a -z "$ADRV_INC" ] && continue
		[ "$dtype" = 'f' ] && continue #don't bother with fdrv
		[ "$dtype" = 'y' -a -z "$YDRV_INC" ] && break
		mkdir -p sandbox3/${dtype}drv/root/.packages/
		[ -f /tmp/${dtype}-woof-packages ] && rm /tmp/${dtype}-woof-packages
		while read -r line
		do 
			IFS='|' read -r a b c <<<$line
			if echo "${fields[${fcnt}]}" | grep -q "$b" ;then
				continue
			else
				echo "$line" >> /tmp/${dtype}-woof-packages
			fi
		done < woof-installed-packages
		cat woof-installed-packages > sandbox3/${dtype}drv/root/.packages/woof-installed-packages
		cat /tmp/${dtype}-woof-packages > woof-installed-packages
		fcnt=$(($fcnt + 1))
	done
fi
###
rm -f sandbox3/rootfs-complete/pinstall.sh

if [ "$ARCHDIR" ];then #ex: i386-linux-gnu
 ln -snf ./ sandbox3/rootfs-complete/lib${lsuffix}/${ARCHDIR}
 ln -snf ./ sandbox3/rootfs-complete/usr/lib${lsuffix}/${ARCHDIR}
 ln -snf ./ sandbox3/rootfs-complete/usr/bin/${ARCHDIR} #120909
fi

ZHACKSDIR=z_${DISTRO_BINARY_COMPAT}-${DISTRO_COMPAT_VERSION}_${DISTRO_TARGETARCH}
if [ -d packages-templates/${ZHACKSDIR} ] ; then
	cp -a --remove-destination packages-templates/${ZHACKSDIR} packages-${DISTRO_FILE_PREFIX}/
	ZHACKS=${ZHACKSDIR}
fi

echo "Copying to sandbox3/rootfs-complete..."
EXTRAS_LIST="${ADRV_INC// /|} ${YDRV_INC// /|} ${AFDRV_INC// /|}"
if echo "$EXTRAS_LIST" | grep -qvE "[a-z]";then
	DUMMY="" 
else
	DUMMY=XXXX #unless they make a Qld beer proggy 'XXXX' will never match; besides need a trailing field
	EXTRAS_LIST="${EXTRAS_LIST// /|}${DUMMY}"
	EXTRAS_LIST="${EXTRAS_LIST//^|}" #strip leading "|"
	EXTRAS_LIST="${EXTRAS_LIST//||/|}" #replace double "||" with "|"
fi
if [ -n "${DUMMY}" ];then
	PKGLIST="`echo "$PKGS_SPECS_TABLE" | grep '^yes' | grep -vE "${EXTRAS_LIST}" | cut -f 2 -d '|' | tr '\n' ' '`" 
else
	PKGLIST="`echo "$PKGS_SPECS_TABLE" | grep '^yes' | cut -f 2 -d '|' | tr '\n' ' '`"
fi
PKGLIST="${PKGLIST}${ZHACKS}"
copy_pkgs_to_build "${PKGLIST}" rootfs-complete
echo

### new {a,f,y}drv build - this sorts the packages and builds the {a,f,y}drv filesystem
ADRV_INCLUDE='';FDRV_INCLUDE_='';YDRV_INCLUDE=''
[ "$(echo $ADRV_INC)" != "" ] && ADRV_INCLUDE=adrv
[ "$(echo $FDRV_INC)" != "" ] && FDRV_INCLUDE=fdrv
[ "$(echo $YDRV_INC)" != "" ] && YDRV_INCLUDE=ydrv
if [ -n "$ADRV_INCLUDE" -o -n "$FDRV_INCLUDE" -o -n "$YDRV_INCLUDE" ];then
	rm -f sandbox3/?pinstall.sh
	for _DRV in  $ADRV_INCLUDE $FDRV_INCLUDE $YDRV_INCLUDE;do
		echo
		echo "Now building sandbox3/${_DRV} with apps redirected to ${_DRV}_${DISTRO_FILE_PREFIX}_${DISTRO_VERSION}.sfs"
		case ${_DRV} in
		adrv)echo '#!/bin/sh' > sandbox3/apinstall.sh
			mkdir -p sandbox3/adrv/usr/local/bin
			copy_pkgs_to_build "${ADRV_INC}" adrv
			chmod 755 sandbox3/apinstall.sh
			echo;;
		fdrv)echo '#!/bin/sh' > sandbox3/fpinstall.sh
			mkdir -p sandbox3/fdrv/
			copy_pkgs_to_build "${FDRV_INC}" fdrv
			chmod 755 sandbox3/fpinstall.sh
			echo
			CONF_DIR=no;;
		ydrv)echo '#!/bin/sh' > sandbox3/ypinstall.sh
			mkdir -p sandbox3/ydrv/usr/local/bin
			copy_pkgs_to_build "${YDRV_INC}" ydrv
			chmod 755 sandbox3/ypinstall.sh
			echo;;
		esac
		# if exists in {a,y}drv a .desktop file we symlink it to root/.config/rox.sourceforge.net/OpenWith/
		if [ ! "$CONF_DIR" = 'no' ];then
			mkdir -p sandbox3/${_DRV}/root/.config/rox.sourceforge.net/OpenWith/
			(
			cd sandbox3/${_DRV}/root/.config/rox.sourceforge.net/OpenWith/
			for d in ../../../../usr/share/applications/*.desktop;do
				app=${d##*/}
				lo=$app # weird bug with libreoffice*.desktop 'permission denied'
				app=${app%\.*}
				if echo $app | grep -q 'libreoffice';then
					echo $app | grep -qE "qstart|startcenter|xsltfilter" && continue
					ln -sf $d $lo # maintains '.desktop' extension
				else
					ln -sf $d $app
				fi
			done
			)
		fi
	done
else
	rm -rf sandbox3/?drv #precaution
fi
### end {a,f,y}drv

#some old packages have xpm and png images in /
mv -f sandbox3/rootfs-complete/{*.xpm,*.png} sandbox3/rootfs-complete/usr/share/pixmaps 2>/dev/null

#110923 fix busybox applets...
DEVXUTILS=' config ar ar86 as as86 audiofile-config autoconf autoheader autom4te automake autopoint autoreconf autoscan autoupdate bacon bacongui bcc bison c2ph catchsegv cc ccmake chem cmake combinediff config_data corelist cpack cpan cpan2dist cpanp cpanp-run-perl cpp ctest cups-config curl-config cvs cvsbug db_archive db_checkpoint db_deadlock db_dump db_hotbackup db_load db_printlog db_recover db_stat db_upgrade db_verify dehtmldiff diet dnsd dprofpp dvdnav-config dvdread-config editdiff elftrunc enc2xs envsubst eqn eqn2graph espdiff filterdiff find2perl fixcvsdiff flex flipdiff freetype-config gccbug gcov gdb gdbserver gdbtui gdiffmk gencat getconf getent gettext gettext.sh gettextize gfortran git git-cvsserver git-receive-pack git-shell git-upload-archive git-upload-pack gitk glade-3 gmake gnome-menu-spec-test gperf gphoto2-config gphoto2-port-config gprof grap2graph grepdiff grn grodvi groff groffer grog grolbp grolj4 grops grotty h2ph h2xs hpftodit iconv idle ifnames indxbib info infokey install-info instmodsh interdiff intltool-extract intltool-merge intltool-prepare intltool-update intltoolize ld ld86 ldd lddlibc4 lex lib-i386 libart2-config libnetcfg libpng-config libpng12-config libtool libtoolize libusb-config lkbib locale localedef lookbib lsdiff m4 make makeinfo man man1 man2dvi man2html mmroff msgattrib msgcat msgcmp msgcomm msgconv msgen msgexec msgfilter msgfmt msggrep msginit msgmerge msgunfmt msguniq mtrace nasm ndisasm neon-config neqn netpbm-config ngettext nm nm86 nroff objcopy objdump objdump86 onsgmls osgmlnorm ospam ospcat ospent osx patch pcap-config pcprofiledump pcre-config pdfroff pdftexi2dvi perl perlbug perldoc perlivp perlthanks pfbtops pic pic2graph piconv pkg-config pl2pm pod2html pod2latex pod2man pod2text pod2usage podchecker podselect post-grohtml pre-grohtml preconv prove psed pstruct ptar ptardiff pydoc ranlib rcs2log readelf recode-sr-latin recountdiff rediff refer rman roff2dvi roff2html roff2pdf roff2ps roff2text roff2x rpcgen s2p sane-config scrollkeeper-config scrollkeeper-extract scrollkeeper-gen-seriesid scrollkeeper-get-cl scrollkeeper-get-content-list scrollkeeper-get-extended-content-list scrollkeeper-get-index-from-docpath scrollkeeper-get-toc-from-docpath scrollkeeper-get-toc-from-id scrollkeeper-install scrollkeeper-preinstall scrollkeeper-rebuilddb scrollkeeper-uninstall scrollkeeper-update shasum size size86 soelim splain splitdiff sprof strace strace-graph strings strip svn svnadmin svndumpfilter svnlook svnserve svnsync svnversion sysprof sysprof-cli tbl texi2dvi texi2pdf texindex tfmtodit troff tzselect unwrapdiff update-mime-database vsyasm whatis xgettext xml2-config xslt-config xsubpp xtrace yacc yasm ytasm zsoelim iconvconfig makewhatis nscd rpcinfo visudo zic ' #11104 111204 remove zdump.
cp -a -f packages-${DISTRO_FILE_PREFIX}/busybox/bin/busybox ./sandbox3/rootfs-complete/bin/
osPTN="s%packages-${DISTRO_FILE_PREFIX}/busybox%%"
for ONEAPPLET in `find packages-${DISTRO_FILE_PREFIX}/busybox -type l | tr '\n' ' '`
do
 ONESPEC="`echo -n "$ONEAPPLET" | sed -e "$osPTN"`"
 ONEPATH="`dirname $ONESPEC`"
 ONENAME="${ONESPEC##*/}" #basename $ONESPEC
 FNDFULL="`find ./sandbox3/rootfs-complete/bin ./sandbox3/rootfs-complete/sbin ./sandbox3/rootfs-complete/usr/bin ./sandbox3/rootfs-complete/usr/sbin -name ${ONENAME}`"
 #130129 deb 'bsdmainutils' has broken 'cal' and 'hd' symlinks... 130204 01micko: fix for spaces in names...
 if [ "$FNDFULL" ];then
  if [ -h "$FNDFULL" ];then
   FULLPATH="$(dirname "$FNDFULL")"
   FULLLINK="$(readlink "$FNDFULL")"
   xFULLLINK="${FULLPATH}/${FULLLINK}"
   [ "`echo -n "$FULLLINK" | cut -c 1`" = "/" ] && xFULLLINK="sandbox3/rootfs-complete${FULLLINK}"
   if [ ! -e "${xFULLLINK}" ];then
    rm -f "$FNDFULL" #130130
    FNDFULL=""
   fi
  fi
 fi
 #111004 need to check in devx also...
 if [ ! "$FNDFULL" ];then
  if [ "$ONENAME" != "[" ];then
   if [ "$ONENAME" != "[[" ];then
    oaPTN=" ${ONENAME} "
    FNDFULL="`echo -n "$DEVXUTILS" | grep "$oaPTN"`"
   fi
  fi
 fi
 if [ "$FNDFULL" ];then
  cp -a -f $ONEAPPLET ./sandbox3/rootfs-complete${ONEPATH}/${ONENAME}-BB-NOTUSED
 else
  cp -a -f $ONEAPPLET ./sandbox3/rootfs-complete${ONEPATH}/
 fi
done
[ -f packages-${DISTRO_FILE_PREFIX}/busybox/pinstall.sh ] && cat packages-${DISTRO_FILE_PREFIX}/busybox/pinstall.sh >> sandbox3/pinstall.sh
[ -f /tmp/rootfs_pkgs_pinstall.sh ] && cat /tmp/rootfs_pkgs_pinstall.sh >> sandbox3/pinstall.sh

rm -f /tmp/3builddistro_end_of_pinstall
echo 'touch /tmp/3builddistro_end_of_pinstall' >> sandbox3/pinstall.sh
chmod 755 sandbox3/pinstall.sh

#pemasu start 131207
echo "Removing extra documentation"
for i in sandbox3/rootfs-complete/usr/share/doc/*; do
   if [ -d $i ]; then
      keep=0
      for j in legal pmusic pburn pbackup mtpaint help wvdial ffconvert cups nls puplogos notecase didiwiki; do #140128 added back legal, 01micko
         case `basename $i` in $j) keep=1 ; break 1 ;; esac
      done
      [ $keep -eq 0 ] && rm -rf $i
   fi
done
echo "Removing extra locales"
for i in sandbox3/rootfs-complete/usr/share/locale/*; do
   if [ -d $i ]; then
      keep=0
      for j in en en_US locale.alias; do
         case `basename $i` in $j) keep=1 ; break 1 ;; esac
      done
      [ $keep -eq 0 ] && rm -rf $i
   fi
done
rm -rf sandbox3/rootfs-complete/usr/share/man/* 2>/dev/null
rm -rf sandbox3/rootfs-complete/usr/share/info/* 2>/dev/null
rm -rf sandbox3/rootfs-complete/usr/share/cups/doc-root/help/* 2>/dev/null
#pemasu end

# new wallpaper maker - test if exec exists
if which mkwallpaper &>/dev/null ; then # must be on the system
	support/mk_walls.sh
fi
echo 
#run post-install script...
echo
echo "Executing sandbox3/pinstall.sh post-install script..."
cd $WKGDIR/sandbox3/rootfs-complete
SAVEWKGDIR="$WKGDIR"
$WKGDIR/sandbox3/pinstall.sh
### new {a,f,y}drv stuff - execute the '{a,f,y}pinstall.sh'
(
cd $WKGDIR/sandbox3/
for post_inst in adrv fdrv ydrv;do
	prefix=${post_inst:0:1}
	[ -f ${prefix}pinstall.sh ] && {(cd ${post_inst};$WKGDIR/sandbox3/${prefix}pinstall.sh)}
done
)
###
echo "Now setting /etc/os-release file"
mk_os_release() {
	dir=/etc
	[ "$1" ] && dir=etc
	 . $dir/DISTRO_SPECS
	
	cat > ${dir}/os-release << _EOF
NAME=Puppy
VERSION="$DISTRO_VERSION"
ID=puppy_$DISTRO_FILE_PREFIX
VERSION_ID=$DISTRO_VERSION
PRETTY_NAME="$DISTRO_NAME $DISTRO_VERSION"
ANSI_COLOR="0;34"
CPE_NAME="cpe:/o:puppy:puppy_linux:$DISTRO_VERSION"
HOME_URL="http://puppylinux.com/"
SUPPORT_URL="http://www.murga-linux.com/puppy/index.php"
BUG_REPORT_URL="https://github.com/puppylinux-woof-CE/woof-CE"
_EOF
}
mk_os_release ok

if [ -f /tmp/3builddistro_end_of_pinstall ] ; then
	echo "pinstall.sh finished OK"
	sleep 2
else
	echo -n "pinstall.sh aborted before completion. Press ENTER or CTRL-C: "
	read isitbad
fi

WKGDIR="$SAVEWKGDIR"
cd $WKGDIR

#100316 script to handle improper shutdown, full hd install...
if [ -f sandbox3/rootfs-complete/sbin/initNEW ];then
 rm -f sandbox3/rootfs-complete/sbin/init #a busybox link.
 mv -f sandbox3/rootfs-complete/sbin/initNEW sandbox3/rootfs-complete/sbin/init
fi

#now do dependency check...
dependcheck() {
 echo -n "" > /tmp/missinglibs.txt
 echo -n "" > /tmp/notmissinglibs0.txt
 echo -n "" > /tmp/notusedlibs.txt
 find $WKGDIR/sandbox3/rootfs-complete -type f | #110516
 while read ONEFILE #110516
 do
  echo -n '.'
  ISANEXEC="`file --brief $ONEFILE | grep -E "LSB executable|shared object"`"
  if [ ! "$ISANEXEC" = "" ];then
   #need to chroot into rootfs-complete...
    NUMBYTESALL="`echo -n "$ONEFILE" | wc -c | tr -s " " | cut -f 2 -d " "`"
    NUMBYTESHD=`echo -n "$WKGDIR/sandbox3/rootfs-complete" | wc -c | tr -s " " | cut -f 2 -d " "`
    NUMBYTESHD="`expr $NUMBYTESHD + 1`"
    NEWROOTFILE="`echo -n "$ONEFILE" | cut -b $NUMBYTESHD-$NUMBYTESALL`"
   LDDRESULT="`chroot ${WKGDIR}/sandbox3/rootfs-complete ldd ${NEWROOTFILE}`"

   MISSINGLIBS="`echo "$LDDRESULT" | grep "not found" | cut -f 2 | cut -f 1 -d " " | tr "\n" " "`"
   if [ ! "$MISSINGLIBS" = "" ];then
    echo "File $ONEFILE has these missing library files:" >> /tmp/missinglibs.txt
    echo " $MISSINGLIBS" >> /tmp/missinglibs.txt
    echo "The missing libs are in these packages:" >> /tmp/missinglibs.txt
    for ONEMISSING in $MISSINGLIBS
    do
     find ${WKGDIR}/packages-${DISTRO_FILE_PREFIX} -name $ONEMISSING >> /tmp/missinglibs.txt
    done
   fi
   #find all libs not missing...
   NOTMISSING="`file --brief $ONEFILE | grep -v "not found" | grep "shared object"`"
   if [ "$NOTMISSING" != "" ];then
    basename "$ONEFILE" >> /tmp/notmissinglibs0.txt
   fi
  fi
 done
 sync
 sort -u /tmp/notmissinglibs0.txt > /tmp/notmissinglibs.txt
 #now go thru rootfs-complete and see if any unused libs...
 find $WKGDIR/sandbox3/rootfs-complete -type f | #110516
 while read ONEFILE #110516
 do
  ISANLIB="`file --brief $ONEFILE | grep "shared object"`"
  if [ ! "$ISANLIB" = "" ];then
   FILEBASE='/'"`basename $ONEFILE`"'$'
   FNDMATCH="`cat /tmp/notmissinglibs.txt | grep "$FILEBASE"`"
   if [ "$FNDMATCH" = "" ];then
    echo "File $ONEFILE is in Puppy but is not used." >> /tmp/notusedlibs.txt
   fi
  fi
 done
}

echo
#build.conf
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" -a "$CHECK_BINARY_DEPS" = "yes" ];then
 echo "Wait awhile..."
 dependcheck
 if [ -s /tmp/missinglibs.txt ];then #true if file not zero size.
  echo
  echo "UNFORTUNATELY, these libs are missing:"
  cat /tmp/missinglibs.txt
  echo
  echo -e "Press \"c\" key then  ENTER key to exit,"
  echo -n "or if you really want to ignore problem, just press ENTER: "
  read goto1
 fi
 [ "$goto1" = "c" ] && exit
 if [ -s /tmp/notusedlibs.txt ];then
  echo
  echo "INTERESTING, the following libs are in Puppy but apparently not used:"
  cat /tmp/notusedlibs.txt
  echo
  echo -e "Press \"c\" key then  ENTER key to exit,"
  echo -n "or if you really want to ignore problem, just press ENTER: "
  read goto1
 fi
 [ "$goto1" = "c" ] && exit
fi
echo "...done."

# new profile script fixup
support/mk_profile

cd sandbox3
#150624 put this back
#100603 i'm now putting common kernel files in here...
cp -a -f ../kernel-skeleton/* rootfs-complete/

#110918 kernel-skeleton now has a pinstall.sh script... 131207 revert ..131212 revert, revert!
cd rootfs-complete
./pinstall.sh
sync
rm -f ./pinstall.sh
cd ..

sync
#now do the kernel...
echo
rm -rf build 2>/dev/null
mkdir build

case "$KERNEL_TARBALL_URL" in *.pet) KPET=yes  ;; esac

if [ "$DISTRO_KERNEL_PET" = 'Raspbian_Kernel' ];then
 #do nothing.
 echo -n #-------

elif [ "$KPET" = "yes" -a "$SDFLAG" = "" ] ; then
 . ../support/kernel_pet.sh #source

else # Huge_Kernel

echo "Installing HUGE kernel"
sleep 1
# see if there is one in kernel-kit
if [ -d '../kernel-kit/dist' ];then
	KIT_KERNEL=`find ../kernel-kit/dist/packages -maxdepth 1 -type f -name 'huge*.tar.bz2' | head -n1`
	[ -z "$KIT_KERNEL" ] || cp $KIT_KERNEL ../huge_kernel/
	# while we are here, we'll copy in fdrive if it exists
	FDRIVE=`find ../kernel-kit/dist/packages -maxdepth 1 -type f -name 'fdrv*.sfs'`
	if [ "$FDRIVE" ];then
		FSIZE=`stat -c %s $FDRIVE`
		FSIZE=$(($FSIZE / 1000000))
		echo "An 'F' drive if has been found. This contains supplementary firmware"
		echo "that can be included in the final build. It will add ${FSIZE}MB to the"
		echo "final image. It does no harm not to include, just some exotic drivers"
		echo "may not work."
		echo "Press 'F' then 'Enter' to include it or just 'Enter' to skip."
		read include_fdrive
		if [ "$include_fdrive" = 'f' ];then
			echo "copying $FDRVSFS to build"
			cp $FDRIVE build/$FDRVSFS
		else
			echo "Skipping f drive."
		fi
	fi
fi
	
# install huge kernel to build 140617
mkdir -p ../huge_kernel
IS_KERNEL=`ls ../huge_kernel|wc -l`

download_kernel() {
	local URL="$1" TARBALL="${1##*/}"
	wget -t0 -c $URL -P ../huge_kernel
	wget ${URL}.md5.txt -P ../huge_kernel
	CHK=`md5sum ../huge_kernel/${TARBALL} |cut -d ' ' -f1`
	MD5=`cat ../huge_kernel/${TARBALL}.md5.txt|cut -d ' ' -f1`
	[ "$CHK" != "$MD5" ] && "checksum failed" && exit 1
	echo "Checksum passed"
	rm ../huge_kernel/${TARBALL}.md5.txt
}

choose_kernel_to_download() {
	TMP=/tmp/kernels$$
	TMP2=/tmp/kernels2$$
	wget ${KERNEL_REPO_URL} -O $TMP
	# grok out what kernels are available
	c=1
	cat $TMP|tr '>' ' '|tr '<' ' '|tr ' ' '\n'|grep -v 'md5'|grep -v 'kernels'|grep 'huge'|grep -v 'href'|\
	while read q;do
	 echo "$c $q" >> $TMP2
	 c=$(($c + 1))
	done
	while [ 1 ];do
	 echo "Please choose the number of the kernel you wish to download"
	 cat $TMP2
	 read choice_k
	 choice=`grep "^$choice_k " $TMP2`
	 [ ! "$choice" ] && echo "invalid choice" && continue
	 echo "You chose ${choice##* }."
	 sleep 3
	 break
	done
	download_kernel "$KERNEL_REPO_URL/${choice##* }"
	rm $TMP
	rm $TMP2
}

if [ "$IS_KERNEL" = 0 ] ; then
	#no kernel, get 1
	if [ "$KERNEL_TARBALL_URL" != "" ] ; then
		download_kernel ${KERNEL_TARBALL_URL} #build.conf
	else
		choose_kernel_to_download
	fi
fi

choose_kernel() {
	TMP=/tmp/kernels3$$
	x=1
	for j in `ls -1 ../huge_kernel|grep -v 'md5'`;do
	 echo "$x $j" >> $TMP
	 x=$(($x + 1))
	done
	while [ 1 ];do
	 echo "Please choose the number of the kernel you wish to use"
	 cat $TMP
	 read choice_k3
	 choice3=`grep ^$choice_k3 $TMP`
	 [ ! "$choice3" ] && echo "invalid choice3" && continue
	 echo "You chose ${choice3##* }."
	 sleep 3
	 break
	done
	KERNEL_VERSION=`echo ${choice3##* } |cut -d '-' -f2-|rev|cut -d '.' -f3-|rev`
	rm $TMP
}
unset IS_KERNEL
IS_KERNEL=`ls ../huge_kernel|wc -l`

[ "$IS_KERNEL" -gt 1 ] && choose_kernel #too many, choose 1

[ "$IS_KERNEL" == 1 ] && KERNEL_VERSION=`ls ../huge_kernel|grep -v 'md5'|cut -d '-' -f2-|rev|cut -d '.' -f3-|rev`

echo "Kernel is $KERNEL_VERSION version"

cp -a ../huge_kernel/huge-${KERNEL_VERSION}.tar.* build/
cd build
tar -xvf huge-${KERNEL_VERSION}.tar.*
[ "$?" = 0 ] || exit 1
rm -f huge-${KERNEL_VERSION}.tar.* #remove pkg
mv -f kernel-modules.sfs-$KERNEL_VERSION $ZDRVSFS
mv -f vmlinuz-$KERNEL_VERSION vmlinuz
cd ..
#end 140617
fi # Huge_Kernel

#========================

if [ "$KPET" = "yes" -a "$SDFLAG" = "" ] ; then
	rootfs=zdrv #produced by support/kernel_pet.sh
else
	rootfs=rootfs-complete
fi

REALKERNAME='vmlinuz'
[ -f ${rootfs}/boot/vmlinuz ] && cp ${rootfs}/boot/vmlinuz build/
if [ -f ${rootfs}/boot/uImage ];then #mele a1000
 cp ${rootfs}/boot/uImage build/vmlinuz #120506 arm builds, using different name for kernel.
 REALKERNAME='uImage'
fi
if [ -f ${rootfs}/boot/kernel.img ];then #raspberry pi
 cp ${rootfs}/boot/kernel.img build/vmlinuz
 REALKERNAME='kernel.img'
fi
if [ -f ${rootfs}/boot/kernel7.img ];then #raspberry pi2
 cp ${rootfs}/boot/kernel7.img build/vmlinuz7
 REALKERNAME='kernel.img'
fi
if [ -f ${rootfs}/boot/vmlinuz-*-rpi ];then #raspberry pi, Raspbian kernel
 mv ${rootfs}/boot/vmlinuz-*-rpi build/vmlinuz
 REALKERNAME='kernel.img'
fi
if [ -f ${rootfs}/boot/vmlinuz-*-rpi2 ];then #raspberry pi2, Raspbian kernel
 mv ${rootfs}/boot/vmlinuz-*-rpi2 build/vmlinuz7
 REALKERNAME='kernel.img'
fi
[ -f ${rootfs}/boot/System.map ] && cp ${rootfs}/boot/System.map ./
sync

#download/verify static initrd-progs
(
	cd ../initrd-progs
	./build.sh -prebuilt -download -arch ${WOOF_TARGETARCH} 1>/dev/null
)

#build the initrd-tree...
echo
echo "Now building initial ramdisk in initrd-tree/..."
rm -rf initrd-progs initrd-tree
cp -a ../initrd-progs ./initrd-progs
ln -s ./initrd-progs/0initrd initrd-tree
ln -sf ../../initrd-progs/0sources ./initrd-progs/0sources
cp ../DISTRO_SPECS ./initrd-tree/

#101027 Iguleder reported DISTRO_SPECS did not have a carriage-return on last line...
xDISTROSPECS="`cat initrd-tree/DISTRO_SPECS`"
echo "$xDISTROSPECS" > initrd-tree/DISTRO_SPECS
echo "$xDISTROSPECS" > rootfs-complete/etc/DISTRO_SPECS

#100911
NEWVARIABLES="#32-byte alpha-numeric ID-string appended to vmlinuz, ${PUPPYSFS}, ${ZDRVSFS} and devx.sfs:
#Puppy default filenames...
#Note, the 'SFS' files below are what the 'init' script in initrd.gz searches for,
#for the partition, path and actual files loaded, see PUPSFS and ZDRV in /etc/rc.d/PUPSTATE
DISTRO_PUPPYSFS='${PUPPYSFS}'
DISTRO_ZDRVSFS='${ZDRVSFS}'
DISTRO_FDRVSFS='${FDRVSFS}'
DISTRO_ADRVSFS='${ADRVSFS}'
DISTRO_YDRVSFS='${YDRVSFS}'"
#DISTRO_DEVXSFS='${DEVXSFS}'"
echo "$NEWVARIABLES" >> initrd-tree/DISTRO_SPECS
echo "$NEWVARIABLES" >> rootfs-complete/etc/DISTRO_SPECS
sync

#120225 this is read by /usr/share/doc/convert-raw-docs...
DISTRO_PUPPYDATE="`date | tr -s " " | cut -f 2,6 -d " "`"
echo "DISTRO_PUPPYDATE='${DISTRO_PUPPYDATE}'" >> rootfs-complete/etc/DISTRO_SPECS
echo "DISTRO_PUPPYDATE='${DISTRO_PUPPYDATE}'" >> initrd-tree/DISTRO_SPECS

# /lib/keymaps and /lib/consolefonts are in bothr rootfs and initd
if [ "$DEFAULTLANG" ] ; then #build.conf
 echo "...ok, set to ${DEFAULTLANG}"
 INITRD_LANG="-lang ${DEFAULTLANG}"
else
 DEFAULTLANG="en_US.UTF-8" #121123
fi
echo "LANG: ${DEFAULTLANG}"
[ "$KEYMAP" ] && INITRD_KM="-keymap $KEYMAP" #initrd-progs

#i think also, set LANG in /etc/profile...
sed -i -e "s%^LANG=.*%LANG=${DEFAULTLANG}%" rootfs-complete/etc/profile
echo

if [ "$KPET" = "yes" -a "$SDFLAG" = "" ] ; then
	# see also support/kernel_pet.sh
	#091222 support laptop internal sd/mmc cards at bootup...
	MEMXTRAMODS='tifm_core.ko tifm_7xx1.ko mmc_core.ko mmc_block.ko tifm_sd.ko led-class.ko sdhci.ko sdhci-pci.ko'
	#v423 2.6.29/30 kernels have extra hid-* modules needed for wireless keyboard to work...
	#HIDXTRAMODS='hid-a4tech.ko hid-apple.ko hid-belkin.ko hid-cherry.ko hid-chicony.ko hid-cypress.ko hid-ezkey.ko hid-gyration.ko hid-logitech.ko hid-microsoft.ko hid-monterey.ko hid-ntrig.ko hid-petalynx.ko hid-pl.ko hid-samsung.ko hid-sony.ko hid-sunplus.ko hid-topseed.ko'
	#110712 reduce list a bit, exclude hid drivers that are not keyboard (note, 2.6.39-3 kernel configured with them builtin)...
	#  removed: hid-gyration.ko hid-ntrig.ko hid-petalynx.ko hid-pl.ko hid-sony.ko hid-sunplus.ko hid-topseed.ko
	HIDXTRAMODS='hid-a4tech.ko hid-apple.ko hid-belkin.ko hid-cherry.ko hid-chicony.ko hid-cypress.ko hid-ezkey.ko hid-logitech.ko hid-microsoft.ko hid-monterey.ko hid-samsung.ko'
	#copy some modules to initrd-tree/... w007 added nls_utf8.ko w468 added nls_cp850.ko w476 added nls_iso8859-2.ko, nls_cp850.ko, nls_cp852.ko. 100214 added floppy.ko, psmouse.ko
	#100406 add btrfs.ko and its deps libcrc32c.ko,zlib_deflate.ko
	#121227 if kernel has f.s. drivers as modules (quirky6), added ext2.ko ext3.ko ext4.ko fat.ko msdos.ko vfat.ko ntfs.ko reiserfs.ko udf.ko, and deps: jbd.ko mbcache.ko jbd2.ko
	NEEDEDINITRDMODS=" ${SCSIDRVS} aufs.ko cdrom.ko fuse.ko ide-cd.ko ide-floppy.ko nls_cp437.ko nls_cp850.ko nls_cp852.ko nls_iso8859-1.ko nls_iso8859-2.ko nls_utf8.ko nls_cp850.ko sqlzma.ko squashfs.ko sr_mod.ko unionfs.ko unlzma.ko aes.ko aes_generic.ko blkcipher.ko crypto_blkcipher.ko cbc.ko cryptoloop.ko rsrc_nonstatic.ko yenta_socket.ko ehci-hcd.ko ohci-hcd.ko uhci-hcd.ko usb-storage.ko usbcore.ko usbhid.ko scsi_wait_scan.ko ssb.ko ${HIDXTRAMODS} ${DISTRO_MODULES} ${MEMXTRAMODS} floppy.ko psmouse.ko btrfs.ko libcrc32c.ko zlib_deflate.ko ext2.ko ext3.ko ext4.ko fat.ko msdos.ko vfat.ko ntfs.ko reiserfs.ko udf.ko jbd.ko mbcache.ko jbd2.ko "
	NEEDEDINITRDMODS="`echo -n "$NEEDEDINITRDMODS" | tr -s ' ' | tr ' ' '\n' | sort -u | tr '\n' ' '`"
	for ONENEEDED in $NEEDEDINITRDMODS
	do
	 echo -n "$ONENEEDED "
	 FNDONE="`find zdrv/lib/modules -type f -name $ONENEEDED | sed -e 's%zdrv/%/%'`"
	 if [ "$FNDONE" != "" ];then
	  FNDDIR="`dirname $FNDONE`"
	  mkdir -p initrd-tree$FNDDIR
	  cp -a zdrv${FNDONE} initrd-tree${FNDONE}
	  [ "$WOOF_TARGETARCH" != "x86_64" ] && gzip initrd-tree${FNDONE}
	  [ "$SDFLAG" = "" ] && rm -f zdrv${FNDONE} #avoid duplication. 120521 SD-image, do not delete.
	 fi
	done
	busybox depmod -b $WKGDIR/sandbox3/initrd-tree -F $WKGDIR/sandbox3/System.map $KERNELVER
	#depmod  -b $WKGDIR/sandbox3/initrd-tree -F $WKGDIR/sandbox3/System.map $KERNELVER
	sync
fi

#### initrd-progs #### build/initrd.gz...
rm -f build/initrd.[gx]z
(
	cd initrd-progs
	rm -f initrd.[gx]z
	./build.sh -prebuilt -auto -arch ${WOOF_TARGETARCH:-default} ${INITRD_LANG} ${INITRD_KM}
	mv -f initrd.[gx]z ../build/
)
if [ ! -f build/initrd.gz -a ! -f build/initrd.xz ] ; then
	echo "No initrd... exiting"
	exit 1
fi

#offer to cutdown the modules, to build a smaller live-cd...
rm -rf zdrv 2>/dev/null #note, current dir is in sandbox3.
rm -f ${ZDRVSFS} #100911 zdrv.sfs

#100622 slackware 13.1: just in case any got through, remove c-shell scripts...
rm -f rootfs-complete/etc/profile.d/*.csh* 2>/dev/null

#sanity check...
echo
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 chroot rootfs-complete echo 'testing chroot'
 if [ $? -ne 0 ];then
  echo "ERROR: could not 'chroot' into sandbox3/rootfs-complete"
  echo "This means that something is incomplete, perhaps a library"
  echo "needed by bash. Check it out. Have to exit script now."
  exit
 fi
else
 echo "*** Doing a cross-build. Not chrooting to do a sanity-test ***"
fi

#get info about the ubuntu pkgs...
echo "Updating pkg data in rootfs-complete/root/.packages ..."
#copy them into the live-cd also...
#in case of Ppup4, PKGLISTS_COMPAT='Packages-puppy-4xx-official'
for ONELIST in $PKGLISTS_COMPAT
do
 cp -f ../$ONELIST ./
 cp -f ../$ONELIST rootfs-complete/root/.packages/
done

for ONELIST in $PACKAGELISTS_PET_ORDER #120506
do
 cp -f ../$ONELIST ./
 cp -f ../$ONELIST rootfs-complete/root/.packages/
done

#also copy the pet package databases...
cp -f ../Packages-puppy-[0-9]-official rootfs-complete/root/.packages/ 2>/dev/null
cp -f ../Packages-puppy-common-official rootfs-complete/root/.packages/ 2>/dev/null #110608
cp -f ../Packages-puppy-noarch-official rootfs-complete/root/.packages/ #120305

if [ -f ../Packages-puppy-${DISTRO_DB_SUBNAME}-official ];then #110723 ex: Packages-puppy-drake-official
 cp -f ../Packages-puppy-${DISTRO_DB_SUBNAME}-official rootfs-complete/root/.packages/
 cp -f ../Packages-puppy-${DISTRO_DB_SUBNAME}-official ./
 ../support/rationalize_categories Packages-puppy-${DISTRO_DB_SUBNAME}-official
 cp -f /tmp/rationalized_categories rootfs-complete/root/.packages/Packages-puppy-${DISTRO_DB_SUBNAME}-official
fi
if [ -f Packages-puppy-wary5-official ];then
 ../support/rationalize_categories Packages-puppy-wary5-official
 cp -f /tmp/rationalized_categories rootfs-complete/root/.packages/Packages-puppy-wary5-official
fi

#also copy this...
cp -f ../PKGS_MANAGEMENT rootfs-complete/root/.packages/

#477 a puppy-puppy build will not have any compat-distro databases...
petcntlimit=3
COMPATDISTRO_DB_FILES="`ls -1 rootfs-complete/root/.packages/Packages-[^p]* 2>/dev/null`"
[ "$COMPATDISTRO_DB_FILES" = "" ] && petcntlimit=5

#w476 swap to make sure 3 pet repos get chosen...
enabledrepos=" "

#100730 DISTRO_COMPAT_VERSION for puppy builds no longer limited to a number 1-5 (ex: wary5)
fNUM1=`echo -n "$DISTRO_COMPAT_VERSION" | wc -c`

repocnt=1
case $DISTRO_FILE_PREFIX in  #110906 fix. $DISTRO_COMPAT_VERSION in #100911
  slacko*) enabledrepos="Packages-puppy-${DISTRO_DB_SUBNAME}-official Packages-puppy-noarch-official " ;;
  dpup) enabledrepos="Packages-puppy-dpup-official Packages-puppy-noarch-official " ;;
  *)
   #add the puppy repos... (i want 5, 4, 3)...
   for ONEREPO in `ls -1 rootfs-complete/root/.packages/Packages-puppy* | sort -r`
   do
    [ $repocnt -gt $petcntlimit ] && break #limit of 3 puppy repos.
    BASEREPO=${ONEREPO##*/} #basename $ONEREPO
    [ "$BASEREPO" = "Packages-puppy-wary5-official" ] && continue #100911 handled above.
    [ "$BASEREPO" = "Packages-puppy-lucid-official" ] && continue #100911 handled above.
    [ "$BASEREPO" = "Packages-puppy-slacko-official" ] && continue #110824 handled above.
    #w019 have decided don't want this showing up in PPM...
    enabledrepos="${enabledrepos}${BASEREPO} "
    repocnt=`expr $repocnt + 1`
   done
  ;;
esac

#add compat-distro repos...
if [ "$COMPATDISTRO_DB_FILES" != "" ];then
  for ONEREPO in `ls -1 rootfs-complete/root/.packages/Packages-[^p]*`
  do
   [ $repocnt -gt 5 ] && break #only allow 5 active repos in PPM.
   BASEREPO="`basename $ONEREPO`"
   enabledrepos="${enabledrepos}${BASEREPO} "
   repocnt=`expr $repocnt + 1`
  done
fi

#120831 above code ok, but really just want these...
case $DISTRO_BINARY_COMPAT in
 ubuntu|trisquel)
  xPUPPYREPOS="Packages-puppy-${DISTRO_DB_SUBNAME}-official Packages-puppy-noarch-official" #Packages-puppy-common-official 
  xCOMPATREPOS="$(ls -1 rootfs-complete/root/.packages/Packages-[^p]* | grep -E '\-main$|\-universe$|\-multiverse$' | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
  #130330 would like universe first...
  xCOMPATREPOS1="$(ls -1 rootfs-complete/root/.packages/Packages-[^p]* | grep -E '\-universe$' | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
  xCOMPATREPOS2="$(ls -1 rootfs-complete/root/.packages/Packages-[^p]* | grep -E '\-main$|\-multiverse$' | rev | cut -f 1 -d '/' | rev | tr '\n' ' ')"
  enabledrepos=" ${xCOMPATREPOS1} ${xCOMPATREPOS2} ${xPUPPYREPOS} "
 ;;
esac

echo "PKG_REPOS_ENABLED='${enabledrepos}'" >> rootfs-complete/root/.packages/PKGS_MANAGEMENT

cp -f ../${DPSFILE} rootfs-complete/root/.packages/DISTRO_PKGS_SPECS   # _00func
cp -f ../${DCRFILE} rootfs-complete/root/.packages/DISTRO_COMPAT_REPOS # _00func
cp -f ../DISTRO_PET_REPOS rootfs-complete/root/.packages/
cp -f ../PKGS_HOMEPAGES rootfs-complete/root/.packages/
#this needed to update pkg db's in a running puppy...
cp -f ../0setup rootfs-complete/usr/local/petget/

#130316 see 0setup and debdb2pupdb...
case ${DISTRO_BINARY_COMPAT} in
 debian|devuan|ubuntu|trisquel|raspbian)
  if [ ! -f ../invaliddepslist ];then
   echo "WARNING WARNING"
   echo "File 'invaliddepslist' does not exist.
This is created by script '0setup'. You must go back and rerun all of the
scripts from 0setup, 1download, 2createpackages.
Recommend abort this script now (ctrl-c).
Or, if you press ENTER to continue, an empty 'invaliddepslist' file will
be created."
   echo -n "Press ENTER to continue: "
   read justgoon
   touch ../invaliddepslist
  fi
 ;;
esac
[ -f ../invaliddepslist ] && cp -f ../invaliddepslist rootfs-complete/usr/local/petget/

#findwoofinstalledpkgs creates 'woof-installed-packages'
cp ../woof-installed-packages rootfs-complete/root/.packages/ #already created earlier
touch ../devx-only-installed-packages #121028
cp ../devx-only-installed-packages rootfs-complete/root/.packages/ #121028

#110722 add kernel db line...
echo "$KERNEL_DB_ENTRY" >> rootfs-complete/root/.packages/woof-installed-packages
#sort alphabetically...
sort --key=1 --field-separator="|" rootfs-complete/root/.packages/woof-installed-packages > /tmp/petget_woof-installed-packages
mv -f /tmp/petget_woof-installed-packages rootfs-complete/root/.packages/woof-installed-packages

#120628 certain utilities are not appropriate when booting on an arm board...
if [ "$SDFLAG" != "" ];then
 for i in usr/sbin/grubconfig usr/sbin/remasterpup2 usr/sbin/resizepfile.sh \
 usr/share/applications/Grub-bootloader-config.desktop \
 usr/share/applications/BootFlash-usb-installer.desktop \
 usr/share/applications/Puppy-universal-installer.desktop \
 usr/share/applications/Remaster-Puppy-live-CD.desktop \
 usr/share/applications/Resize-personal-storage-file.desktop \
 usr/share/applications/WakePup2.desktop
 do rm -f rootfs-complete/${i} ; done
fi

#130326 script to adjust fonts to suit 96 dpi (puppy used to have 78 dpi)...
[ ! -d rootfs-complete/usr/share/ptheme ] && rootfs-complete/usr/sbin/hackfontsize #don't execute if we have ptheme

#130618 restore the "layer:" lines in /etc/xdg/templates/_root_.jwmrc...
#note, this file is now in Woof, I took it out of the JWM pet.
JWMFLG=0
JWM3=`grep -E '^jwm[_-][0-9]' rootfs-complete/root/.packages/woof-installed-packages | cut -f 3 -d '|' | cut -c 1-3 | head -n 1`
[ ! $JWM3 ] && JWMFLG=1 #assume too old. note, there is a jwm2 pet, which is older version.
if vercmp $JWM3 ge 2.2; then JWMFLG=2; fi
if vercmp $JWM3 ge 790; then JWMFLG=2; fi
case $JWMFLG in
 2)
  sed -i -e 's%.*LAYER_MINIXCAL.*%\t\t<Option>layer:above</Option>%' rootfs-complete/etc/xdg/templates/_root_.jwmrc
  sed -i -e 's%.*LAYER_GTKDIALOGSPLASH.*%\t\t<Option>layer:above</Option>%' rootfs-complete/etc/xdg/templates/_root_.jwmrc
  sed -i -e 's%.*LAYER_SPLASHWINDOW.*%\t\t<Option>layer:above</Option>%' rootfs-complete/etc/xdg/templates/_root_.jwmrc
 ;;
esac

#fix the menus...
#111123 ***NOTICE*** cross-build, will have to run fixmenus and indexgen.sh at first bootup.
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 echo
 echo "Constructing configuration files for JWM, Fvwm95, IceWM, openbox..."
 chroot rootfs-complete /usr/sbin/fixmenus
 chroot rootfs-complete /usr/sbin/indexgen.sh #generate help index...
 #...note, rootfs-skeleton/pinstall.sh pre-processes the help files.
fi

#shared library loading...
echo "/lib${lsuffix}" > rootfs-complete/etc/ld.so.conf
echo "/usr/lib${lsuffix}" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/usr/local/lib${lsuffix} ] && echo "/usr/local/lib${lsuffix}" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/usr/X11R7/lib${lsuffix} ] && echo "/usr/X11R7/lib${lsuffix}" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/gnome2/lib${lsuffix} ] && echo "/opt/gnome2/lib${lsuffix}" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/qt4/lib${lsuffix} ] && echo "/opt/qt4/lib${lsuffix}" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/mozilla.org/lib${lsuffix} ] && echo "/opt/mozilla.org/lib${lsuffix}" >> rootfs-complete/etc/ld.so.conf
[ -d rootfs-complete/opt/samba/lib${lsuffix} ] && echo "/opt/samba/lib${lsuffix}" >> rootfs-complete/etc/ld.so.conf
echo "/root/my-applications/lib" >> rootfs-complete/etc/ld.so.conf

if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 LDCONFIG="`find ../packages-${DISTRO_FILE_PREFIX}/ -type f -name ldconfig | grep '/sbin/' | head -n 1`"
 cp -a $LDCONFIG rootfs-complete/
 chroot rootfs-complete ./ldconfig
 rm -f rootfs-complete/ldconfig
 sync
else
 #***NOTICE*** have to run ldconfig at first boot.
 LDCONFIG="`find ../packages-${DISTRO_FILE_PREFIX}/ -type f -name ldconfig | grep '/sbin/' | head -n 1`"
 cp -a $LDCONFIG rootfs-complete/sbin/
fi

#i don't know what 'lintian' is for...
rm -rf rootfs-complete/usr/share/lintian 2>/dev/null
#maybe stray /install dir from slackware pkgs...
rm -rf rootfs-complete/install 2>/dev/null
#slackware pkg may create this...
rm -rf rootfs-complete/etc/cron.daily 2>/dev/null

#w460 theme selection...
# if "default.ext" exists in wallpapers then we set it up in poor man's ptheme...
wdefault=`find rootfs-complete/usr/share/backgrounds -name 'default.*'`
# double check for ptheme
wptheme=`find rootfs-complete/usr/share/ -type d -name 'ptheme'`
if [ -z "$wdefault" -a -z "$wptheme" ];then #it don't exists so we proceed with this method 
	echo
	echo "Continuing to setup `pwd`/rootfs-complete..."
	echo
	#141204 optional file...
	DEFAULT_THEME_GTK2=''
	DEFAULT_THEME_JWM=''
	DEFAULT_THEME_OPENBOX=''
	DEFAULT_THEME_WALLPAPER=''
	DEFAULT_THEME_DESK_ICONS=''
	DEFAULT_THEME_ROX_TEXT_FOREGROUND='black'
	DEFAULT_THEME_ROX_TEXT_SHADOW='thin' #none, thin, or thick
	DEFAULT_THEME_ROX_TEXT_FONT='DejaVu Sans 10'
	DEFAULT_THEME_XORG_TEXT_DPI=  #141206
	if [ -f default-theme ];then
	. ../default-theme
	fi
	#w478 now have a gui for theme selection...
	eval "`../support/choose_themes`"
	#...returns BACKGROUNDIMAGE, DESKICONS, GTKTHEME, JWMTHEME.
	
	if [ "$EXIT" = "OK" ];then
	 case $BACKGROUNDIMAGE in #110831
	  *.png|*.PNG)
	   mv -f rootfs-complete/usr/share/backgrounds/$BACKGROUNDIMAGE rootfs-complete/usr/share/backgrounds/default.png
	   sed -i -e 's%default\.jpg%default.png%' rootfs-complete/root/Choices/ROX-Filer/PuppyPin
	   #i don't know what uses this, but change it anyway...
	   sed -i -e 's%default\.jpg%default.png%' rootfs-complete/etc/Puppybackgroundpicture
	  ;;
	  *.svg)
	   mv -f rootfs-complete/usr/share/backgrounds/$BACKGROUNDIMAGE rootfs-complete/usr/share/backgrounds/default.svg
	   sed -i -e 's%default\.jpg%default.svg%' rootfs-complete/root/Choices/ROX-Filer/PuppyPin
	   sed -i -e 's%default\.jpg%default.svg%' rootfs-complete/etc/Puppybackgroundpicture
	  ;;
	  *)
	   mv -f rootfs-complete/usr/share/backgrounds/$BACKGROUNDIMAGE rootfs-complete/usr/share/backgrounds/default.jpg
	  ;;
	 esac
	
	echo "# -- THEME AUTO-WRITTEN DO NOT EDIT
	include \"/usr/share/themes/${GTKTHEME}/gtk-2.0/gtkrc\"
	
	include \"/root/.gtkrc.mine\"
	
	# -- THEME AUTO-WRITTEN DO NOT EDIT
	gtk-theme-name=\"${GTKTHEME}\"" > rootfs-complete/root/.gtkrc-2.0
	
	 pathGTK3THEME="`find rootfs-complete/usr/share/themes/${GTKTHEME} -type d -name gtk-3.0`"
	 if [ "$pathGTK3THEME" ];then #XDG_CONFIG_HOME=/root/.config
	  #130404 link to actual theme...
	  ln -snf "$pathGTK3THEME" rootfs-complete/root/.config/gtk-3.0
	 fi
	
	 echo -n "$DESKICONS" > rootfs-complete/etc/desktop_icon_theme
	
	 if [ -d rootfs-complete/root/.jwm/themes ];then
	  cp -f rootfs-complete/root/.jwm/themes/${JWMTHEME}-jwmrc rootfs-complete/root/.jwm/jwmrc-theme
	  cp -f rootfs-complete/root/.jwm/themes/${JWMTHEME}-colors rootfs-complete/root/.jwm/jwm_colors 2>/dev/null
	 fi
	
	 if [ -f rootfs-complete/root/.config/openbox/rc.xml ];then #20100406
	  obPATTERN="s%Natura%${OBTHEME}%"
	  sed -i -e "$obPATTERN" rootfs-complete/root/.config/openbox/rc.xml
	 fi
	 sync
	fi #end theme chooser ok.
else
	DESKICONS=`cat rootfs-complete/etc/desktop_icon_theme` # set up by poor man's ptheme
	echo $DESKICONS
	pathGTK3THEME="`find rootfs-complete/usr/share/themes/${GTKTHEME} -type d -name gtk-3.0`"
	 if [ "$pathGTK3THEME" ];then 
	  ln -snf "$pathGTK3THEME" rootfs-complete/root/.config/gtk-3.0
	 fi
	sync
fi
 #have copied code from icon_switcher_cli to here, modified...
 NEWTHEME="$DESKICONS" #see above
 for ONESVG in `find rootfs-complete/usr/local/lib/X11/themes/${NEWTHEME}/ -maxdepth 1 -name \*.svg | tr '\n' ' '` #140103 removed '-type f'
 do
  ONEBASENAME="`basename $ONESVG .svg`"
  rm -f rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}48.png
  rsvg-convert -w 48 -h 48 -o rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}48.png $ONESVG
  rm -f rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}24.png 2>/dev/null #140102 sent to null, shouldn't exist here
 done
 for ONEPNG in `find rootfs-complete/usr/local/lib/X11/themes/${NEWTHEME}/ -maxdepth 1 -type f -name \*.png | tr '\n' ' '`
 do
  ONEBASENAME="`basename $ONEPNG .png`"
  cp -f $ONEPNG rootfs-complete/usr/local/lib/X11/pixmaps/
  touch -m rootfs-complete/usr/local/lib/X11/pixmaps/${ONEBASENAME}.png #v3.98
  xONEBASENAME="`basename $ONEBASENAME 48`"
 done

 if [ "$DISPLAY" ];then #110726 pngoverlay does not work when X not running. --quick fix, perform this operation in woof in 3builddistro.
  #110721 new standardised icons to show when mounted...
  if [ -e rootfs-complete/usr/sbin/pngoverlay -a -e rootfs-complete/usr/local/lib/X11/pixmaps/closebox_outline48.png ];then #overlay app created by vovchik (see source /usr/sbin/pngoverlay.bac)
   rm -f rootfs-complete/usr/local/lib/X11/pixmaps/*_mntd*.png
   #111123 get pngoverlay from host, in case of cross-build...
   cp -f /usr/sbin/pngoverlay rootfs-complete/usr/local/lib/X11/pixmaps/ #dumb, but needs to be in same folder.
   cd rootfs-complete/usr/local/lib/X11/pixmaps
   for ONEDRV in card drive floppy optical usbdrv
   do
    ./pngoverlay ${ONEDRV}48.png closebox_outline48.png ${ONEDRV}_mntd48.png #background foreground output.
    ./pngoverlay ${ONEDRV}48.png locked_outline48.png ${ONEDRV}_mntd_boot48.png
   done
   rm -f rootfs-complete/usr/local/lib/X11/pixmaps/pngoverlay
   cd ../../../../../../
  fi
 fi

#110912 modify jwm to use menu icon 'start-button.png' if present...
#note, similar code also in /usr/sbin/icon_switcher (desktop icon switcher script).
if [ -f rootfs-complete/root/.jwmrc-tray ];then
 if [ -f rootfs-complete/usr/local/lib/X11/${NEWTHEME}/start-button.png ];then #default theme has menu icon.
  if [ -f rootfs-complete/usr/local/lib/X11/pixmaps/start-button.png ];then #precaution.
   if [ "`grep 'start-button\.png' rootfs-complete/root/.jwmrc-tray`" = "" ];then
    #the default is to use 'mini-dog.xpm' with text "Menu"...
    echo "rootfs-complete/root/.jwmrc-tray modified to use start-button.png menu icon"
    echo "(which is in rootfs-complete/usr/local/lib/X11/pixmaps/)"
    PTN1='s%label="Menu" icon="mini-dog\.xpm"%icon="start-button.png"%'
    sed -i -e "$PTN1" rootfs-complete/root/.jwmrc-tray
   fi
  fi
 fi
fi

# fix some rox defaults... see also menus2 (shortcuts)
sed -i \
	-e 's%.*"menu_xterm".*%<Option name="menu_xterm">defaultterminal</Option>%' \
	-e 's%.*"dnd_uri_handler".*%<Option name="dnd_uri_handler">defaultterminal -e wget $1</Option>%' \
	rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options 2>/dev/null
sed -i 's%"console".*%"console">/usr/local/bin/defaultterminal</icon>%' rootfs-complete/root/Choices/ROX-Filer/PuppyPin 2>/dev/null

#v424 rox desktop text is default white with black shadow, not suited all backgrounds...
if [ "$ROX_TEXT_BLACK" = "yes" ];then #build.conf
 echo "ROX: black text"
 sed -i -e 's%.*"pinboard_fg_colour".*%<Option name="pinboard_fg_colour">#000000000000</Option>%' \
	-e 's%.*"pinboard_shadow_labels".*%<Option name="pinboard_shadow_labels">0</Option>%' \
	rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
fi

if [ "$ROXFILER_FONT" != "" ];then #build.conf
 echo "ROX filer font: $ROXFILER_FONT"
 sed -i -e "s%.*\"label_font\".*%<Option name=\"label_font\">${ROXFILER_FONT}</Option>%" rootfs-complete/root/.config/rox.sourceforge.net/ROX-Filer/Options
fi

# workaround for hardcoded rox everywhere - allow more default file managers..
if [ -f rootfs-complete/usr/local/bin/rox ] ; then
	mv -f rootfs-complete/usr/local/bin/rox rootfs-complete/usr/local/bin/roxfiler
fi
ln -sv defaultfilemanager rootfs-complete/usr/local/bin/rox
sed -i 's|Exec=rox|Exec=roxfiler|' rootfs-complete/usr/share/applications/ROX-Filer-file-manager.desktop

if [ "$JWM_XLOAD" = "no" ] ; then #build.conf
	for i in rootfs-complete/root/.jwmrc-tray rootfs-complete/root/.jwm/jwmrc-tray2
	do
		[ -f $i ] || continue
		grep -q '"xload"' $i  && sed -i '/xload/d' $i
	done
fi

#squashfs: assume 3 kernel
[ ! -e rootfs-complete/usr/sbin/mksquashfs ] && [ -e rootfs-complete/usr/sbin/mksquashfs4 ] && ln -sf mksquashfs4 rootfs-complete/usr/sbin/mksquashfs
[ ! -e rootfs-complete/usr/sbin/unsquashfs ] && [ -e rootfs-complete/usr/sbin/unsquashfs4 ] && ln -sf unsquashfs4 rootfs-complete/usr/sbin/unsquashfs

#w470 create a table for dialog/Xdialog: /usr/share/i18n/dialog_table
#'chooselocale' is called from /etc/rc.d/rc.country at first boot and
#pre-creating this table speeds things up. 111123
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 chroot rootfs-complete /usr/sbin/chooselocale composeonly
fi

[ -f rootfs-complete/pet.specs ] && rm -f rootfs-complete/pet.specs #w478

#091123 t2 build get rid of some stray stuff...
[ -d rootfs-complete/usr/share/devhelp ] && rm -rf rootfs-complete/usr/share/devhelp
[ -d rootfs-complete/usr/share/man ] && rm -rf rootfs-complete/usr/share/man
[ -d rootfs-complete/usr/share/omf ] && rm -rf rootfs-complete/usr/share/omf

#111006 generic logo mechanism for all pups...
for logosize in 48 96 ; do
	if [ -f rootfs-complete/usr/share/doc/puplogos/${DISTRO_FILE_PREFIX}${logosize}.png ];then
	 mv -f rootfs-complete/usr/share/doc/puplogos/${DISTRO_FILE_PREFIX}${logosize}.png rootfs-complete/usr/share/doc/${DISTRO_FILE_PREFIX}${logosize}.png
	 ln -snf ${DISTRO_FILE_PREFIX}${logosize}.png rootfs-complete/usr/share/doc/puppylogo${logosize}.png
	fi
done
rm -rf rootfs-complete/usr/share/doc/puplogos

#100208 hack so net-setup.sh can find ifplugstatus (pup 4.3.2 needs this)...
if [ ! -e rootfs-complete/sbin/ifplugstatus ];then
 [ -e rootfs-complete/sbin/ifplugstatus-0.18 ] && ips='ifplugstatus-0.18'
 [ -e rootfs-complete/sbin/ifplugstatus-0.28 ] && ips='ifplugstatus-0.28'
 [ "$ips" != "" ] && ln -s ${ips} rootfs-complete/sbin/ifplugstatus
fi

#100524 fix cups for samba, got this code from /usr/sbin/cups_shell...
#fixes from rcrsn51 for samba printing...
[ -f rootfs-complete/etc/cups/snmp.conf ] && [ "`stat --format=%U%G rootfs-complete/etc/cups/snmp.conf | grep 'UNKNOWN'`" != "" ] && chown root:nobody rootfs-complete/etc/cups/snmp.conf
if [ ! -e rootfs-complete/usr/lib/cups/backend/smb ];then
 [ -f rootfs-complete/opt/samba/bin/smbspool ] && ln -s /opt/samba/bin/smbspool rootfs-complete/usr/lib/cups/backend/smb
 [ -f rootfs-complete/usr/bin/smbspool ] && ln -s /usr/bin/smbspool rootfs-complete/usr/lib/cups/backend/smb
fi
[ -f rootfs-complete/etc/opt/samba/smb.conf ] && chmod 755 rootfs-complete/etc/opt/samba/smb.conf #need world-readable.
[ -f rootfs-complete/etc/samba/smb.conf ] && chmod 755 rootfs-complete/etc/samba/smb.conf #need world-readable.

chmod 1777 rootfs-complete/tmp #ref: http://murga-linux.com/puppy/viewtopic.php?p=677630#677630
chmod 777 rootfs-complete/var

#101015 make sure our modified 'alsaconf' is used (just in case got overwritten)...
cp -a -f ../rootfs-skeleton/usr/sbin/alsaconf rootfs-complete/usr/sbin/

#w481 extra stripping...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #120502 strip will not work for cross-build.
 if [ "`which strip`" = "" ];then
  echo "OH, NO GOOD, you don't have the 'strip' executable. The 'devx' sfs has it."
  EXTRA_STRIPPING=no
 fi
 if [ "$EXTRA_STRIPPING" = "yes" ];then
  find rootfs-complete/bin rootfs-complete/sbin rootfs-complete/usr/bin rootfs-complete/sbin -type f |
  while read ONEFILE ; do
    echo -n "${ONEFILE##*/} " #basename "$ONEFILE"
    FILE_INFO=$(file "$ONEFILE")
    case $FILE_INFO in *"ELF"*)
      case $FILE_INFO in
         *"executable"*) strip --strip-unneeded "$ONEFILE" ;;
      esac
    esac
  done
  echo
  find rootfs-complete/usr/lib rootfs-complete/usr/X11R7/lib -type f -name \*.so* |
  while read ONEFILE ; do
    echo -n "${ONEFILE##*/} " #basename "$ONEFILE"
    FILE_INFO=$(file "$ONEFILE")
    case $FILE_INFO in *"ELF"*)
      case $FILE_INFO in
         *"shared object"*) strip --strip-unneeded "$ONEFILE" ;;
      esac
    esac
  done
  echo
 fi
fi

#100527 build a .pet with lists of all builtin files...
echo
echo "Now building sandbox3/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.pet,"
echo "which is a PET package with lists of all packages and files builtin to the SFS..."
rm -rf 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION} 2>/dev/null
mkdir 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
mkdir /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
GENDIRS=$(find -H ../packages-${DISTRO_FILE_PREFIX} -maxdepth 1 -type d | sort)
for ONEGENDIR in ${GENDIRS}
do
 ONEGENNAME=${ONEGENDIR##*/} #basename $ONEGENDIR
 [ "`echo "$PKGS_SPECS_TABLE" | grep "|${ONEGENNAME}|" | grep '^yes'`" = "" ] && continue
 echo -n "$ONEGENNAME "
 find $ONEGENDIR | \
   sed -e "s%^\\.\\./packages-${DISTRO_FILE_PREFIX}/${ONEGENNAME}/%/%" \
       -e "\%^\\.\\./packages-${DISTRO_FILE_PREFIX}/${ONEGENNAME}%d" | \
   sort > /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/${ONEGENNAME}.files
 sync
 #store the information more efficiently...
 mkdir -p 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files
 (
 PREVPATH=''; PREVPATH0=''
 while read ONELINE ; do
  #-- directory
  if [ -d "rootfs-complete${ONELINE}" ];then
   #120925 ignore debian/ubuntu multiarch circular symlink (these are create by 2createpackages)...
   if [ -h "rootfs-complete${ONELINE}" ];then
    if [ "$(readlink "rootfs-complete${ONELINE}")" = "./" ];then
     PREVPATH0="$(dirname "$ONELINE")" #121010 fix, missing some files.
     [ "$PREVPATH0" != "$PREVPATH" ] && echo "$PREVPATH0"
     continue
    fi
   fi
   PREVPATH="$ONELINE"
   echo "$ONELINE"
  #-- file
  else
   NEWPATH=${ONELINE%/*} #dirname "$ONELINE"
   [ "${NEWPATH}" = "" ] && continue #ignore top-level files.
   NEWFILE="${ONELINE##*/}" #basename "$ONELINE"
   if [ -e "rootfs-complete${ONELINE}" ];then #sanity check.
    if [ "$PREVPATH" == "$NEWPATH" -o "$PREVPATH0" == "$NEWPATH" ];then #sanity check. 121010
     echo " ${NEWFILE}"
    fi
   fi
  fi
 done < /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/${ONEGENNAME}.files
 ) > 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files/${ONEGENNAME}
done

# do the same for rootfs-packages
if [ -f /tmp/rootfs-packages.specs ];then
	while read line ; do
		PKGL=`echo $line | cut -d '|'  -f 2`
		echo -n "${PKGL} "
		ogPATTERN="s%^\\.\\./rootfs-packages/${PKGL}/%/%"
		find ../rootfs-packages/$PKGL | sed -e "$ogPATTERN" | sort > /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/${PKGL}.files
		sync
		mkdir -p 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files
		PREVPATH=''; PREVPATH0=''
		cat /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/${PKGL}.files |
		while read ONELINE
			 do
				[ "`echo "$ONELINE" | cut -c 1`" == "." ] && continue #catch ex: ../packages-qrky/abiword
				if [ -d "rootfs-complete${ONELINE}" ];then
					PREVPATH="$ONELINE"
					echo "$ONELINE" >> 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files/${PKGL}
				else
					NEWPATH="`dirname "$ONELINE"`"
					[ "$NEWPATH" == "/" ] && continue #ignore top-level files.
					NEWFILE=${ONELINE##*/} #basename "$ONELINE"
					if [ -e "rootfs-complete${ONELINE}" ];then #sanity check.
						if [ "$PREVPATH" == "$NEWPATH" -o "$PREVPATH0" == "$NEWPATH" ];then #sanity check. 121010
							echo " ${NEWFILE}" >> 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files/${PKGL}
						fi
					fi
				fi
		done
	done < /tmp/rootfs-packages.specs
	rm -f /tmp/rootfs-packages.specs
fi
echo
echo "0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}|0builtin_files_${DISTRO_FILE_PREFIX}|${DISTRO_VERSION}||BuildingBlock|||0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.pet||Lists of files built-in to the SFS file||||
" > 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/pet.specs
rm -f 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.pet 2>/dev/null

dir2tgz 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
tgz2pet 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.tar.gz
rm -rf /tmp/0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}
echo
echo "installing pkg lists into rootfs-complete/root/.packages/builtin_files..."
cp -a -f 0builtin_files_${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}/root/.packages/builtin_files rootfs-complete/root/.packages/builtin_files
echo '...done'

#140615
if [ "$KPET" != "yes" ] ; then
	echo "Removing redundant aufs-utils..."
	for r in auibusy auplink mount.aufs umount.aufs aufs libau.so* aufs aufs.5 aubrsync aubusy auchk
	do find rootfs-complete/ -type f -name $r -delete
		echo "deleting $r"
	done
fi

#140616 remove firmware - in kernel-modules.sfs = $ZDRVSFS
if [ "$SDFLAG" = "" -o "$KPET" = "yes" ] ; then
	echo "Removing redundant firmware as it is in the z drive"
	rm -rf rootfs-complete/lib/firmware 2>/dev/null
fi
sleep 1
#100613 create font cache for fontconfig (in /var/cache/fontconfig)...
echo
echo "Creating Fontconfig cache files..."
rm -rf rootfs-complete/var/cache/fontconfig
mkdir -p rootfs-complete/var/cache/fontconfig
#111123 ***NOTICE*** cross-build, this will have to be executed at first boot...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 chroot rootfs-complete /usr/bin/fc-cache -s -v
fi

if [ ! -e rootfs-complete/usr/bin/pango-querymodules ];then #110517 debian squeeze hack
 [ -x ../packages-${DISTRO_FILE_PREFIX}/pango_DEV/usr/bin/pango-querymodules ] && \
 cp -f ../packages-${DISTRO_FILE_PREFIX}/pango_DEV/usr/bin/pango-querymodules rootfs-complete/usr/bin/
fi

#100622 slackware 13.1: this file is zero bytes...
#111123 ***NOTICE*** cross-build, this will have to be executed at first boot...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then #111123
 PANGOMODULES="`find rootfs-complete/etc/pango -type f -name pango.modules | sed -e 's%rootfs-complete%%'`"
 [ "$PANGOMODULES" = "" ] && PANGOMODULES='/etc/pango/pango.modules'
 if [ ! -s rootfs-complete${PANGOMODULES} ];then
  if [ -x rootfs-complete/usr/bin/pango-querymodules ];then
   echo "/usr/bin/pango-querymodules > ${PANGOMODULES}"  > rootfs-complete/zz
   chroot rootfs-complete /bin/ash zz
   rm -f rootfs-complete/zz
  fi
 fi
fi

#110622 /etc/rc.d/rc.update executes:  gdk-pixbuf-query-loaders > /etc/gtk-2.0/gdk-pixbuf.loaders
#however, mageia1 requires above file to be at /usr/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache
#create a symlink...
#170330 change to native way of updating loader chache: gdk-pixbuf-query-loaders --update-cache
#see /etc/rc.d/rc.update

#120605 shinobar ref: http://murga-linux.com/puppy/viewtopic.php?t=76961&start=195
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then
 chroot rootfs-complete /usr/bin/gtk-query-immodules-2.0 > rootfs-complete/etc/gtk-2.0/gtk.immodules
else
 touch rootfs-complete/etc/gtk-2.0/gtk.immodules
fi
[ "$VERDIR" ] && ln -snf ../../../../etc/gtk-2.0/gtk.immodules rootfs-complete/usr/lib${lsuffix}/gtk-2.0/${VERDIR}/gtk.immodules

#100627 recent versions of xorg server, turn modesetting on... 110822 improve...
mkdir -p rootfs-complete/etc/modprobe.d
if [ ! "$SDFLAG" ] ;then #build.conf
   echo "options i915 modeset=${KMS_i915}"  > rootfs-complete/etc/modprobe.d/i915.conf
   echo "options radeon modeset=${KMS_radeon}"  > rootfs-complete/etc/modprobe.d/radeon.conf
   echo "options nouveau modeset=${KMS_nouveau}"  > rootfs-complete/etc/modprobe.d/nouveau.conf
fi

if [ "$UICHOICE" != "PPM2" ];then #build.conf
   mkdir -p rootfs-complete/var/local/petget
   echo "Classic" > rootfs-complete/var/local/petget/ui_choice
else 
   echo "Leaving PPM2 gui"
fi
echo

# fix CUPS thanks to jamesbond, shinobar
# re http://www.murga-linux.com/puppy/viewtopic.php?p=784181#784181
echo "Fixing permissions on CUPS libraries.."
chmod 0755 rootfs-complete/usr/lib${lsuffix}/cups/backend
chmod 0755 rootfs-complete/usr/lib${lsuffix}/cups/filter
chmod 500 rootfs-complete/usr/lib${lsuffix}/cups/backend/*
echo

#110213 fix if .utf8 entries missing...
if [ "`grep 'nb_NO\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'nb_NO.utf8:					nb_NO.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi
if [ "`grep 'nn_NO\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'nn_NO.utf8:					nn_NO.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi
if [ "`grep 'ru_UA\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'ru_UA.utf8:					ru_UA.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi
if [ "`grep 'ru_RU\.utf8' rootfs-complete/usr/share/X11/locale/locale.alias`" = "" ];then
 echo 'ru_RU.utf8:					ru_RU.UTF-8' >> rootfs-complete/usr/share/X11/locale/locale.alias
fi

#110329 some python files, move to 'devx'...
#121022 but only if python is supposed to be in devx...
if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|' | grep 'exe>dev')" != "" ];then
 PYTHONDIR=''
 [ -d rootfs-complete/usr/lib${lsuffix}/python2.5 ] && PYTHONDIR='python2.5'
 [ -d rootfs-complete/usr/lib${lsuffix}/python2.6 ] && PYTHONDIR='python2.6'
 [ -d rootfs-complete/usr/lib${lsuffix}/python2.7 ] && PYTHONDIR='python2.7'
 if [ "$PYTHONDIR" ];then
  mkdir -p devx/usr/lib${lsuffix}/${PYTHONDIR}
  cp -a -f --remove-destination rootfs-complete/usr/lib${lsuffix}/${PYTHONDIR}/* devx/usr/lib${lsuffix}/${PYTHONDIR}/
  rm -rf rootfs-complete/usr/lib${lsuffix}/${PYTHONDIR}
 fi
fi

#110412 move all .bac, .pot and .pupdev files to 'devx'...
find rootfs-complete/usr -type f -name '*.pot' -o -name '*.pupdev' -o -name '*.bac' |
while read ONEPD
do
 DESTDIR="`dirname "$ONEPD" | sed -e 's%rootfs\-complete%%'`"
 mkdir -p "devx${DESTDIR}"
 mv -f "$ONEPD" "devx${DESTDIR}/"
done
#120224 move rootfs-complete/usr/share/doc/nls to 'devx'...
mkdir -p devx/usr/share/doc/nls
cp -a -f rootfs-complete/usr/share/doc/nls/* devx/usr/share/doc/nls/
rm -r -f rootfs-complete/usr/share/doc/nls

#110417 this may be helpful for more apps than Thunar...
#this will make Thunar use ROX-Filer's icons for files...
if [ -d rootfs-complete/usr/local/apps/ROX-Filer/ROX/MIME ];then
 if [ ! -e rootfs-complete/usr/share/icons/hicolor/48x48/mimetypes ];then
  ln -s ../../../../local/apps/ROX-Filer/ROX/MIME rootfs-complete/usr/share/icons/hicolor/48x48/mimetypes
 fi
fi

if grep -q '^spot:' /etc/passwd ; then
	#110429 fix just in case...
	busybox chown -h -R spot:spot rootfs-complete/root/spot
fi

#110429 this is difficult. may need a fix, think want glibc scsi headers in usr/include/scsi...
mkdir -p devx/usr/include
if [ -d ../packages-${DISTRO_FILE_PREFIX}/linux_headers_DEV/usr/include/scsi ];then
 cp -a ../packages-${DISTRO_FILE_PREFIX}/linux_headers_DEV/usr/include/scsi devx/usr/include/scsi-KERNEL
fi
if [ -d ../packages-${DISTRO_FILE_PREFIX}/linux-header_DEV/usr/include/scsi ];then
 cp -a ../packages-${DISTRO_FILE_PREFIX}/linux-header_DEV/usr/include/scsi devx/usr/include/scsi-KERNEL
fi
if [ -d ../packages-${DISTRO_FILE_PREFIX}/glibc_DEV/usr/include/scsi ];then
 cp -a ../packages-${DISTRO_FILE_PREFIX}/glibc_DEV/usr/include/scsi devx/usr/include/scsi-GLIBC
fi
#also see further down, when building devx.

#110523 override files from rootfs-skeleton/root/Choices/MIME-types, if rox pkg has older files...
cp -a -f ../rootfs-skeleton/root/Choices/MIME-types/* rootfs-complete/root/Choices/MIME-types/
#110620 do same for mime icons...
cp -a -f --remove-destination ../rootfs-skeleton/usr/local/apps/ROX-Filer/ROX/MIME/* rootfs-complete/usr/local/apps/ROX-Filer/ROX/MIME/

#make sure zenity is a symlink to yad
[ -f rootfs-complete/usr/bin/yad ] && ln -s yad rootfs-complete/usr/bin/zenity 2>/dev/null

#fixes for gtkdialog
if [ -e rootfs-complete/usr/sbin/gtkdialog ];then
  [ ! -e rootfs-complete/usr/sbin/gtkdialog3 ] && ln -sv gtkdialog rootfs-complete/usr/sbin/gtkdialog3
  [ ! -e rootfs-complete/usr/sbin/gtkdialog4 ] && ln -sv gtkdialog rootfs-complete/usr/sbin/gtkdialog4
else # rootfs-complete/usr/sbin/gtkdialog does not exist
  [ -e rootfs-complete/usr/sbin/gtkdialog3 ] && ln -sv gtkdialog3 rootfs-complete/usr/sbin/gtkdialog
  [ -e rootfs-complete/usr/sbin/gtkdialog4 ] && ln -svf gtkdialog4 rootfs-complete/usr/sbin/gtkdialog
fi

#110822 some customisations provided by 01micko for Slacko...
if [ "${DISTRO_FILE_PREFIX:0:6}" = "slacko" ];then #130321 #161008 fix for 64
 if [ -f ../support/slacko/woof_base_hack  ];then
  echo "Running Slacko customization script ../support/slacko/woof_base_hack..."
  ../support/slacko/woof_base_hack
 fi
fi

#111123 put this into target, want to know if cross-build at 1st boot (see rc.update)...
[ -f ../WOOFMERGEVARS ] && cp -f ../WOOFMERGEVARS rootfs-complete/etc/rc.d/

#120522 precise puppy, seamonkey was crashing. needed /usr/share/glib-2.0/schemas/apps.gecko-mediaplayer.preferences,
# but also needs this compile operation...
# ***NOTICE*** cross-build, this will have to be executed at first boot...
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ];then
 if [ -d rootfs-complete/usr/share/glib-2.0/schemas ];then
  [ -e rootfs-complete/usr/bin/glib-compile-schemas ] && chroot rootfs-complete /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas
 fi
 #120523 seems need this too...
 if [ -d rootfs-complete/usr/lib${lsuffix}/gio/modules ];then
  [ -e rootfs-complete/usr/bin/gio-querymodules ] && chroot rootfs-complete /usr/bin/gio-querymodules /usr/lib${lsuffix}/gio/modules
 fi
fi

#120704 some constraints in a small system...
if [ "$SDFLAG" != "" ];then
 #ask if want to load swap partition/file...
 echo
 echo "Puppy will normally load a swap partition or swap file if it/they exist,
however you can choose to ignore them and not load them at bootup."
 echo -n "Press ENTER key to load swap at bootup, any key otherwise: "
 read wantswap
 if [ "$wantswap" != "" ];then
  echo "BOOT_DISABLESWAP='yes'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #read by /etc/rc.d/rc.sysinit
  echo "...BOOT_DISABLESWAP='yes' in /etc/rc.d/BOOTCONSTRAINED, read by rc.sysinit."
 fi
 #this also reduces writes to flash card... um, relatime seems to be the default anyway... 120707 change to noatime...
 echo "BOOT_ATIME='noatime'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #rc.sysinit will remount / with 'relatime' (constrains updating access time). 120707 change to noatime.
 #this file in rootfs-skeleton, overwrite...
 echo 'none          /proc        proc     defaults,noatime               0 0
none          /sys         sysfs    defaults,noatime               0 0
none          /dev/pts     devpts   gid=2,mode=620,noatime         0 0
shmfs         /dev/shm     tmpfs    defaults,noatime      0 0' > rootfs-complete/etc/fstab
 echo "BOOT_DIRTYWRITE='1500'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #defer writing to disk. refer: http://www.lesswatts.org/tips/disks.php
 echo "BOOT_SCHEDULER='deadline'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #my kernel defaults to 'cfq', change to 'deadline'. refer: http://tombuntu.com/index.php/2008/09/04/four-tweaks-for-using-linux-with-solid-state-drives/
 echo "BOOT_UDEVDCHILDREN='1'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120709 is this a good idea? append --children-max=1 to udevd in rc.sysinit.
 echo "BOOT_BOARD='${BOOT_BOARD}'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120714 read by quicksetup.
 echo "BOOT_DISABLEXORGWIZARD='yes'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120723 read in xwin, also xorgwizard. also see below.
 echo "BOOT_DISABLEALSACONF='yes'" >> rootfs-complete/etc/rc.d/BOOTCONSTRAINED #120724 'alsaconf' does not work on arm boards.
fi

[ "$DISTRO_XORG_AUTO" ] && autoflag="$DISTRO_XORG_AUTO" #DISTRO_SPECS
[ "$XORG_AUTO" ] && autoflag="$XORG_AUTO"               #_00build.conf
[ "$xorgauto" = "" ] && autoflag='yes'                  #precaution
[ "$BOOT_DISABLEXORGWIZARD" = "yes" ] && autoflag='no'  #arm

if [ "`grep '^DISTRO_XORG_AUTO' rootfs-complete/etc/DISTRO_SPECS`" = "" ];then #110621
 echo "DISTRO_XORG_AUTO='${autoflag}'" >> rootfs-complete/etc/DISTRO_SPECS
else
 sed -i -e "s%^DISTRO_XORG_AUTO.*%DISTRO_XORG_AUTO='${autoflag}'%" rootfs-complete/etc/DISTRO_SPECS
fi

#121123 want this info in ppm...
echo '#multiarch distros, such as Ubuntu, will have this. ex: /usr/lib/i386-linux-gnu, so DISTRO_ARCHDIR=i386-linux-gnu' >> rootfs-complete/etc/DISTRO_SPECS
echo "DISTRO_ARCHDIR='${ARCHDIR}'" >> rootfs-complete/etc/DISTRO_SPECS
echo "DISTRO_ARCHDIR='${ARCHDIR}'" >> initrd-tree/DISTRO_SPECS

#120830 my hunspell-en-us pet has pinstall.sh that creates symlinks of en_US.aff and en_US.dic
#from seamonkey and firefox. however, need to do this thoroughly...
#note: see also woof rootfs-skeleton/usr/share/doc/langpack-template (used by momanager).
if [ -d rootfs-complete/usr/share/hunspell ];then
 for ONEHUN in `find rootfs-complete/usr/share/hunspell -mindepth 1 -maxdepth 1 -type f -name '*.dic' -o -name '*.aff' | tr '\n' ' '`
 do
  HUNBASE="`basename $ONEHUN`"
  DICTDIRS="`find rootfs-complete/usr/lib -mindepth 2 -maxdepth 2 -type d -name dictionaries | tr '\n' ' '`"
  for ONEDICTDIR in $DICTDIRS
  do
   [ ! -e ${ONEDICTDIR}/${HUNBASE} ] && ln -s ../../../share/hunspell/${HUNBASE} ${ONEDICTDIR}/${HUNBASE}
  done
 done
fi

#121022 may need this (see below similar code if python in devx)...
if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|' | grep 'exe>dev')" = "" ];then
 [ -e rootfs-complete/usr/bin/python2.5 ] && ln -s python2.5 rootfs-complete/usr/bin/python 2>/dev/null
 [ -e rootfs-complete/usr/bin/python2.6 ] && ln -s python2.6 rootfs-complete/usr/bin/python 2>/dev/null
 [ -e rootfs-complete/usr/bin/python2.7 ] && ln -s python2.7 rootfs-complete/usr/bin/python 2>/dev/null
fi

#121212 puinstall.sh was not getting removed...
[ -f rootfs-complete/puninstall.sh ] && rm -f rootfs-complete/puninstall.sh

#130326 now permanently 96... 130327 reintroduce a choice...
##130129 /root/.Xresources has dpi set to 78 in all prior pups. In future, might prefer 96...
#141206 now have DEFAULT_THEME_XORG_TEXT_DPI (usually =96).
if [ "$DEFAULT_THEME_XORG_TEXT_DPI" != "" ];then #141206
 dpisizeflag="$DEFAULT_THEME_XORG_TEXT_DPI"
else
 dpisizeflag="$XORG_TEXT_DPI" #build.conf
fi
if [ "$dpisizeflag" ];then #130512 scsijon: fix size...
 fsPTN='s%^Xft\.dpi:.*%Xft.dpi: '"${dpisizeflag}%"
 sed -i -e "$fsPTN" rootfs-complete/root/.Xresources
 echo "...ok, dpi now ${dpisizeflag}"
fi

ln -sf Xorg rootfs-complete/usr/bin/X 2>/dev/null #/usr/bin/X

if grep -q '^spot:' /etc/passwd ; then
	# optional, run internet apps as user 'spot'...
	# add QtWeb... 130723 add opera... 130821 add firefox... 132211 firefox didn't work, separate, see above
	for AINTERNETAPP in QtWeb opera firefox seamonkey
	do
	 [ ! -e rootfs-complete/usr/bin/${AINTERNETAPP} -a ! -e rootfs-complete/usr/lib${lsuffix}/${AINTERNETAPP}* ] && continue
	 echo -n "ENTER only to not run ${AINTERNETAPP} as spot: "
	 if [ "$RUN_INTERNET_APPS_AS_SPOT" = "yes" ];then #build.conf
	  ../support/setup-spot "${AINTERNETAPP}=true"
	  echo "...ok, ${AINTERNETAPP} will run as spot."
	 else
	  echo "${AINTERNETAPP}=false" >> rootfs-complete/root/.spot-status #so that an unticked checkbox will display in loginmanager.
	  echo "...ok, ${AINTERNETAPP} will not run as spot."
	 fi
	done
	#setup-spot is also called by the Login & Security Manager in running Puppy...
fi

cp -f ../support/setup-spot rootfs-complete/usr/sbin/

(
	cd rootfs-complete
	echo "$EXTRA_COMMANDS" | while read i ; do eval $i ; done
)

rm -rf rootfs-complete/tmp/* #121123 some above chroot operations may have left something behind in here.

## $DEFAULTAPPS - build.conf
echo "Setting default apps specified in build.conf ..."
echo "$DEFAULTAPPS" | sed -e '/^$/d' | while read entry ; do
	IFS="=" read -r field value <<< "$entry"
	[ "$field" = "" -o "$value" = "" ] && continue
	echo "$field -> $value"
	echo "#!/bin/sh
exec $value \"\$@\"" > rootfs-complete/usr/local/bin/$field
	chmod 755 rootfs-complete/usr/local/bin/$field
done

BUILD_SFS='yes'

if [ "$SDFLAG" != "" ]; then
 echo
 echo "Since you are building a SD card image, it is not necessary"
 echo "to build the main sfs file.  Press ENTER only to skip,"
 echo "any other character then ENTER to build it anyway."
 read buildanyway
 if [ "$buildanyway" = '' ]; then
  BUILD_SFS='no'
 fi
fi


#-------------------------
#before building puppy.sfs from rootfs-complete, check for any invalid symlinks
#and move them to the devx...
echo
echo "Finding invalid symlinks..."
if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ] ; then
	dirs=$(ls -d rootfs-complete/* | sed -e 's|^rootfs-complete||' | grep -vE '/dev/|/proc/|/sys/') #|/initrd/|/tmp/|/var/|/run/|/mnt/
	#chroot rootfs-complete find -L $dirs -type l > /tmp/invalidsymlinks
	chroot rootfs-complete find $dirs -type l ! -exec test -e {} \; -print > /tmp/invalidsymlinks
	#/usr/local/lib/X11/pixmaps: these images created 1st boot... (was in the old code)
	cat /tmp/invalidsymlinks | sed '\|lib/X11/pixmaps|d' | \
	while read ONESYMLINK ; do
		UPONE=${ONESYMLINK%/*} #dirname ONESYMLINK
		mkdir -p devx${UPONE}
		cp -a -f "rootfs-complete${ONESYMLINK}" devx${UPONE}/
		rm -f "rootfs-complete$ONESYMLINK"
	done
else #do it without chroot...
	find rootfs-complete/ -type l | sed -e '\%/dev/%d' -e '\%/proc/%d' -e '\%/usr/share/icons/%d' | \
	while read ONESYMLINK ; do
		xONESYMLINK="${ONESYMLINK#rootfs-complete}" #sed -e 's/^rootfs\-complete//'`"
		LINKTO="`readlink rootfs-complete"${xONESYMLINK}"`" #120502 fix for spaces in path.
		[ -e "rootfs-complete${LINKTO}" ] && continue #absolute path
		UPONE=${xONESYMLINK%/*}        #UPONE="`dirname "$xONESYMLINK"`"
		[ "$UPONE" = "" ] && UPONE='/' #empty -> '/'
		[ -e "rootfs-complete${UPONE}/${LINKTO}" ] && continue #relative path
		mkdir -p "devx${UPONE}"
		cp -a -f "$ONESYMLINK" devx${UPONE}/
		rm -f "$ONESYMLINK"
	done
fi

sync

if [ "$BUILD_SFS" = 'yes' ]; then
	###########
	#build the rootfs-complete sfs...
	echo
	echo "Now building the main f.s., ${PUPPYSFS}..."
	sync
	rm -f build/${PUPPYSFS} 2>/dev/null
	${MKSQUASHFS} rootfs-complete build/${PUPPYSFS} ${SFSCOMP} #100911 110713
	sync
	###########
	if [ -d adrv -o -d fdrv -o -d ydrv ];then
		###########
		#build the {a,f,y}drive sfs...
		for SYS_SFS in adrv fdrv ydrv
		do
			[ ! -d "$SYS_SFS" ] && echo "no $SYS_SFS" && continue
			case $SYS_SFS in
				adrv) TYPE_SYS_SFS="${ADRVSFS}";;
				fdrv) TYPE_SYS_SFS="${FDRVSFS}";;
				ydrv) TYPE_SYS_SFS="${YDRVSFS}";;
			esac
			echo
			echo "Now building the $SYS_SFS f.s., $TYPE_SYS_SFS ..."
			sync
			rm -f build/${TYPE_SYS_SFS} 2>/dev/null
			${MKSQUASHFS} $SYS_SFS build/${TYPE_SYS_SFS} ${SFSCOMP} #170330
			sync
		done
		###########	
	fi
fi # if BUILD_SFS

# very big 'if'
if [ "$SDFLAG" = "" ];then #120506
 if [ "$UFEI_ISO" = 'yes' ];then
	# new 160404 UEFI iso - see support/uefi_cd.sh
	UFLG=-uefi
	WOOF_OUTPUT="woof-output-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}${UFLG}"
	../support/uefi_cd.sh
 elif [ "$G4DOS_ISO" = 'yes' ];then
	WOOF_OUTPUT="woof-output-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}" #woodenshoe-wi idea. #140619
	[ -d ../$WOOF_OUTPUT ] || mkdir -p ../$WOOF_OUTPUT
	echo "Now building ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso"
	rm -f ../${WOOF_OUTPUT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso 2>/dev/null
	cp -a ../boot/grub4dos/* build/
	sed -i "s/#distrodesc#/${DISTRO_NAME} ${DISTRO_VERSION}/" build/menu.lst
	VOLUMEID=$(echo "${DISTRO_FILE_PREFIX}${DISTRO_VERSION}" | tr -d '.')
	$MKISOFS -D -R -V ${VOLUMEID} -o ../${WOOF_OUTPUT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso -b grldr -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table ./build/
	sync
	which isohybrid && isohybrid ../${WOOF_OUTPUT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso
	( cd ../${WOOF_OUTPUT}
	   md5sum ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso > ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso.md5.txt )
 else
	WOOF_OUTPUT="woof-output-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}" #woodenshoe-wi idea. #140619
	[ -d ../$WOOF_OUTPUT ] || mkdir -p ../$WOOF_OUTPUT
	#build live-cd .iso file...
	echo "Now building ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso"
	rm -f ../${WOOF_OUTPUT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso 2>/dev/null
	if [ -f rootfs-complete/usr/lib${lsuffix}/syslinux/isolinux.bin ];then
	 cp -a rootfs-complete/usr/lib${lsuffix}/syslinux/isolinux.bin build/
	else
	 cp -a ../boot/isolinux.bin build/
	fi
	
	BOOTLOGO="puppy"
	BOOTLABEL="puppy"
	#111006 generic mechanism, boot logo for any pup...
	[ -f ../boot/boot-dialog/${DISTRO_FILE_PREFIX}-splash.gif ] && BOOTLOGO="${DISTRO_FILE_PREFIX}-splash"
	blPATTERN="s%BOOTLABEL%${BOOTLABEL}%"
	namePATTERN="s/DISTRO_NAME/${DISTRO_NAME}/"
	verPATTERN="s/DISTRO_VERSION/${DISTRO_VERSION}/"
	prefixPATTERN="s/DISTRO_FILE_PREFIX/${DISTRO_FILE_PREFIX}/"
	sed -e "$namePATTERN" -e "$verPATTERN" -e "$prefixPATTERN" -e "$blPATTERN" ../boot/boot-dialog/help.msg > build/help.msg
	if [ "$REMOVELINE1" != "" ];then
	 grep -v "$REMOVELINE1" build/help.msg > /tmp/3builddistro-help.msg
	 mv -f /tmp/3builddistro-help.msg build/help.msg
	fi
	#100916 second help screen...
	sed -e "$namePATTERN" -e "$verPATTERN" -e "$prefixPATTERN" -e "$blPATTERN" ../boot/boot-dialog/help2.msg > build/help2.msg
	if [ "$REMOVELINE1" != "" ];then
	 grep -v "$REMOVELINE1" build/help2.msg > /tmp/3builddistro-help2.msg
	 mv -f /tmp/3builddistro-help2.msg build/help2.msg
	fi
	
	cp -f ../boot/boot-dialog/boot.msg build/boot.msg
	cat ../boot/boot-dialog/isolinux.cfg | sed -e "$blPATTERN" > build/isolinux.cfg
	export RGBDEF=/usr/share/X11/rgb.txt
	../boot/boot-dialog/textongif.sh ../boot/boot-dialog/${BOOTLOGO}.gif "$DISTRO_VERSION" > logo.gif
	../boot/boot-dialog/gif2lss logo.gif > build/logo.16
	
	#120217 translate early-boot splash screens... (expect building with langpack)
	if [ "$DEFAULTLANG" != "en_US" ];then
	 DEFAULTLANG1="${DEFAULTLANG%_*}" #ex: de
	 DEFAULTLANG12="${DEFAULTLANG%.*}" #ex: de_DE
	 SPLASHFILE=""
	 [ -f ../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG12} ] && SPLASHFILE="../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG12}"
	 [ ! "$SPLASHFILE" ] && [ -f ../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG1} ] && SPLASHFILE="../rootfs-skeleton/usr/share/sss/initrd_strings.${DEFAULTLANG1}"
	 if [ "$SPLASHFILE" ];then
	  #translate boot.msg...
	  sPTN="/^\[boot.msg\]/,/^$/p" #this is a multi-line block find expression.
	  CODEBLOCK="`sed -n "$sPTN" ${SPLASHFILE} | sed -e '/^#/d' -e '/%%/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
	  if [ "$CODEBLOCK" ];then
	   echo "$CODEBLOCK" > /tmp/3builddistro-boot-splash-translation
	   sed -i -f /tmp/3builddistro-boot-splash-translation build/boot.msg
	  fi
	  #translate help.msg...
	  sPTN="/^\[help.msg\]/,/^$/p" #this is a multi-line block find expression.
	  CODEBLOCK="`sed -n "$sPTN" ${SPLASHFILE} | sed -e '/^#/d' -e '/%%/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
	  if [ "$CODEBLOCK" ];then
	   echo "$CODEBLOCK" > /tmp/3builddistro-boot-splash-translation
	   sed -i -f /tmp/3builddistro-boot-splash-translation build/help.msg
	  fi
	 fi
	fi
	
	#110426 help file for Windows users
	CUT2INSERT="`echo -n "$DISTRO_FILE_PREFIX" | cut -c 1,2`"
	CUT3INSERT="`echo -n "$DISTRO_FILE_PREFIX" | cut -c 1,2,3`"
	cut2PATTERN="s%CUT2INSERT%${CUT2INSERT}%"
	cut3PATTERN="s%CUT3INSERT%${CUT3INSERT}%"
	sed -e "$verPATTERN" -e "$prefixPATTERN" -e "$cut2PATTERN" -e "$cut3PATTERN" ../boot/README.HTM > build/README.HTM
	sync
	$MKISOFS -D -R -o ../${WOOF_OUTPUT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table ./build/
	sync
	# 131227 iguleder: made the generated ISO image hybrid, so it can be written to flash drives using dd
	which isohybrid && isohybrid ../${WOOF_OUTPUT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso
	( cd ../${WOOF_OUTPUT}
	  md5sum ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso > ${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.iso.md5.txt )
 fi
fi
#end very big if


if [ "$SDFLAG" = "" ];then
 echo
 echo "Would you like to burn it to a CD? "
 echo -n "ENTER only for yes, or any printable char then ENTER not to: "
 read writeitnow
 if [ "$writeitnow" = "" ];then
  CDR=""
  [ -f /etc/cdburnerdevice ] && CDR="/dev/`cat /etc/cdburnerdevice`"
  [ "$CDR" = "" ] && CDR='/dev/sr0'
  CDDESCR="`probedisk2 | grep '|optical|' | grep "$CDR" | cut -f 3 -d '|'`"
  echo -n 'Type "y" for multisession, else just ENTER: '
  read BURNMULTI
  if [ "$BURNMULTI" = "y" ];then
   BURNMULTI="-multi -tao -pad"
  else
   BURNMULTI="-dao"
  fi
  echo "Please insert blank CD into $CDR
(which is described as: ${CDDESCR})
-- also be sure that it is unmounted."
  echo -n "Then hit ENTER key: "
  read yayburn
  $CDRECORD $BURNMULTI -data -eject -v speed=4 padsize=300k dev=$CDR ../${WOOF_OUTPUT}/${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}${UFLG}.iso
  sync
  eject $CDR
  echo "...done"
 fi
else #120506 sd image
 
 echo
 echo "Please choose the SD-card skeleton image file, to suit target board."
 CNT=1
 echo -n "" > /tmp/3builddistro-probeimage
 ls -1 ../sd-skeleton-images | grep 'xz$' | grep "$BOOT_BOARD" | #120714 BOOT_BOARD is raspi, mele, or odroidx.
 while read ONEIMAGE
 do
  echo "${CNT} ${ONEIMAGE}" >> /tmp/3builddistro-probeimage
  CNT=`expr $CNT + 1`
 done
 while [ 1 ];do
  echo
  echo "Type number which is your choice of SD image:"
  cat /tmp/3builddistro-probeimage
  read sdnumber
  SDIMAGE="`cat /tmp/3builddistro-probeimage | head -n $sdnumber | tail -n 1 | cut -f 2 -d ' '`"
  echo -n "You chose '${SDIMAGE}' Press ENTER if correct: "
  read sdcorrect
  [ "$sdcorrect" = "" ] && break
 done
 SDBASE="`basename ../sd-skeleton-images/${SDIMAGE} .xz`"
 echo
 echo "Please type the name that you want to give the SD image file, or press ENTER"
 SDBASEBASE="`basename $SDBASE .img | sed -e 's%-201[0-9]*%-%' -e 's%-skeleton%-%' | cut -f 1,2,3 -d '-'`"
 PUPIMG="${SDBASEBASE}-${DISTRO_FILE_PREFIX}-${DISTRO_VERSION}.img"
 echo -n "only for the default [${PUPIMG}]: "
 read PUPIMG1
 [ "$PUPIMG1" != "" ] && PUPIMG="`basename $PUPIMG1 .img`.img"
 echo "...chosen $PUPIMG"
 echo
 
 #need to know uncompressed size of image...
 echo "Uncompressing image, please wait..."
 [ -f ../${WOOF_OUTPUT}/${PUPIMG} ] && rm -f ../${WOOF_OUTPUT}/${PUPIMG}
 unxz --stdout ../sd-skeleton-images/${SDIMAGE} > ../${WOOF_OUTPUT}/${PUPIMG}
 if [ $? -ne 0 ];then
  [ -f ../${WOOF_OUTPUT}/${PUPIMG} ] && rm -f ../${WOOF_OUTPUT}/${PUPIMG}
  echo "Uncompress fail. Aborting."
  exit 1
 fi
 sync

 #120703 allow 2nd partition to be ext2, ext3 or ext4...
 SDIMGINFO="`disktype ../${WOOF_OUTPUT}/${PUPIMG}`"
 SDFS2="`echo "$SDIMGINFO" | grep -o 'Ext[0-9] file system' | cut -f 1 -d ' ' | tr '[A-Z]' '[a-z]'`"
 case $SDFS2 in
  ext2|ext3|ext4) SDFS2="ext4" ;; #120706 hack for now. disktype misreports ext4 without journal as ext2.
  *)
   echo -n "wrong f.s. ${SDFS2} in ${SDIMAGE}, aborting. Press ENTER: "
   read exitme
   exit
  ;;
 esac
 
 #130530 better to write everything to the image file first, then write to sd afterward...
 #need to know the offsets of the filesystems...
 P1BYTES=`echo "$SDIMGINFO" | grep '^Partition 1:' | cut -f 2 -d '(' | cut -f 1 -d ' '`
 P1SECTORS=`echo "$SDIMGINFO" | grep '^Partition 1:' | cut -f 2 -d '(' | cut -f 3 -d ' '`
 P1STARTSECTORS=`echo "$SDIMGINFO" | grep '^Partition 1:' | rev | cut -f 1 -d ' ' | rev | cut -f 1 -d ')'`
 BYTESPERSECTOR=`expr $P1BYTES \/ $P1SECTORS` #normally 512.
 P1STARTBYTES=`expr $P1STARTSECTORS \* $BYTESPERSECTOR`
 
 P2BYTES=`echo "$SDIMGINFO" | grep '^Partition 2:' | cut -f 2 -d '(' | cut -f 1 -d ' '`
 P2SECTORS=`echo "$SDIMGINFO" | grep '^Partition 2:' | cut -f 2 -d '(' | cut -f 3 -d ' '`
 P2STARTSECTORS=`echo "$SDIMGINFO" | grep '^Partition 2:' | rev | cut -f 1 -d ' ' | rev | cut -f 1 -d ')'`
 P2STARTBYTES=`expr $P2STARTSECTORS \* $BYTESPERSECTOR`
 
 echo
 echo "Copying Linux kernel to SD image file..."
 mkdir -p /mnt/sdimagep1
 mkdir -p /mnt/sdimagep2
 mount-FULL -t vfat -o loop,offset=${P1STARTBYTES} ../${WOOF_OUTPUT}/${PUPIMG} /mnt/sdimagep1
 if [ $? -ne 0 ];then
  echo "Sorry, mounting vfat partition 1 (at offset ${P1STARTBYTES}) of ${PUPIMG} failed. Aborting script."
  exit 1
 fi
 #120613 restore correct kernel image name...
 case $REALKERNAME in
  uImage)     cp -f build/vmlinuz /mnt/sdimagep1/uImage ;;
  kernel.img)
   mv -f rootfs-complete/boot/* /mnt/sdimagep1/ #move firmware to first partition, /boot should be empty in second partition.
   [ -f build/vmlinuz ] && cp -f build/vmlinuz /mnt/sdimagep1/kernel.img #kernel for original pi.
   [ -f build/vmlinuz7 ] && cp -f build/vmlinuz7 /mnt/sdimagep1/kernel7.img #kernel for pi2.
   ;;
  *)          cp -f build/vmlinuz /mnt/sdimagep1/ ;;
 esac
 echo -n "$REALKERNAME" > /mnt/sdimagep1/REALKERNAME #just in case need to know, in a running puppy.
 sync
 busybox umount /mnt/sdimagep1 2>/dev/null
 echo "...done"
 
 echo
 echo "Copying Puppy filesystem to SD image file, please wait..."
 mount-FULL -t ${SDFS2} -o loop,offset=${P2STARTBYTES} ../${WOOF_OUTPUT}/${PUPIMG} /mnt/sdimagep2
 if [ $? -ne 0 ];then
  echo "Sorry, mounting ${SDFS2} partition 2 (at offset ${P2STARTBYTES}) of ${PUPIMG} failed. Aborting script."
  exit 1
 fi
 cp -a rootfs-complete/* /mnt/sdimagep2/
 sync
 #120704 add to /etc/fstab...
# echo "/dev/${SDDEVICE}2     /     ${SDFS2}     defaults,noatime   0 1" >> /mnt/sdimagep2/etc/fstab #120707 change relatime to noatime.
 #not sure if the root partition is referred to as /dev/root or /dev/mmcblk0p2 on the raspi
 echo "/dev/mmcblk0p2     /       ${SDFS2}     defaults,noatime      0 1" >> /mnt/sdimagep2/etc/fstab
 echo "/dev/mmcblk0p1     /boot   vfat     defaults,noatime      0 2" >> /mnt/sdimagep2/etc/fstab
 sync
 echo "...done"
 busybox umount /mnt/sdimagep2 2>/dev/null
 
 IMGBYTES=`stat --format=%s ../${WOOF_OUTPUT}/$PUPIMG`
 
 echo
 IMGK=`expr $IMGBYTES \/ 1024`
 echo "The image file is ${IMGK}KB, so needs to be compressed for distribution."

 echo "If you only want to write to SD card choose 'none' which is the fastest."
 echo "You can also compress the image file yourself later."
 echo "Choose compression type:
1 xz   (smallest, slowest)
2 gz   (larger, faster)
3 none (huge, instant)"
 read compresstype
 case $compresstype in
  1) COMPRESS='xz' ;;
  2) COMPRESS='gz' ;;
  *) COMPRESS='none' ;;
 esac
 echo "...you chose $COMPRESS"

 if [ "$COMPRESS" != 'none' ]; then
 echo "Compressing, please wait..."
 [ -f ../${WOOF_OUTPUT}/${PUPIMG}.${COMPRESS} ] && rm -f ../${WOOF_OUTPUT}/${PUPIMG}.${COMPRESS}
 if [ "$COMPRESS" = 'xz' ]; then
 xz --stdout ../${WOOF_OUTPUT}/${PUPIMG} > ../${WOOF_OUTPUT}/${PUPIMG}.xz
 elif [ "$COMPRESS" = 'gz' ]; then
 gzip --stdout ../${WOOF_OUTPUT}/${PUPIMG} > ../${WOOF_OUTPUT}/${PUPIMG}.gz
 fi
 sync
 echo "...${PUPIMG}.${COMPRESS} created."
 COMPRIMGBYTES=`stat --format=%s ../${WOOF_OUTPUT}/${PUPIMG}.${COMPRESS}`
 echo
 echo "The image is now ${PUPIMG}.${COMPRESS} and is ${COMPRIMGBYTES}bytes."
 COMPRIMGK=`expr $COMPRIMGBYTES \/ 1024`
 echo "(${COMPRIMGK}KB)"
 echo "Image file may be distributed to others!"
 echo
 fi # if COMPRESS

 echo
 echo "Would you like to write it to a SD card?  ENTER only for no,"
 echo -n "or any printable char then ENTER to write image to SD card: "
 read writeSD
 if [ "$writeSD" = "" ];then
  WRITE_SD="no"
 else
  WRITE_SD="yes"
 fi

 if [ "$WRITE_SD" = "yes" ];then

  echo
  echo "Please insert the SD card. Make sure that it is the same size or bigger than
 indicated on the filename of the skeleton image file that you chose."
  echo -n "Press ENTER after it is inserted: "
  read waitinsert
  sleep 2
  while [ 1 ];do
   CNT=1
   echo -n "" > /tmp/3builddistro-probedisk
   probedisk |
   while read ONEPROBE
   do
    echo "${CNT} ${ONEPROBE}" >> /tmp/3builddistro-probedisk
    CNT=`expr $CNT + 1`
   done
   echo
   echo "Type number which is your SD card:"
   cat /tmp/3builddistro-probedisk
   read sdnumber
   SDDEVICE="`cat /tmp/3builddistro-probedisk | head -n $sdnumber | tail -n 1 | cut -f 2 -d ' ' | cut -f 1 -d '|'`"
   echo -n "You chose ${SDDEVICE} Press ENTER if correct: "
   read sdcorrect
   [ "$sdcorrect" = "" ] && break
  done
  echo
  echo "Sanity check: ${PUPIMG}
 is to be written to ${SDDEVICE}."
  echo -n "Press ENTER to continue: "
  read yepgo

  SDCARDINFO="`disktype ${SDDEVICE}`"
  #120506b check that sd card big enough...
  SDCARDBYTES=`echo "$SDCARDINFO" | grep '^Block device' | cut -f 2 -d '(' | cut -f 1 -d ' '` #ex: 4023386112
  if [ $IMGBYTES -gt $SDCARDBYTES ];then
   echo
   echo "Sorry, the image file is ${IMGBYTES}bytes, however the
SD card is only ${SDCARDBYTES}bytes. Cannot continue."
   exit 1
  fi

  echo
  echo "Writing image file ${PUPIMG} to SD card ${SDDEVICE}..."
  dd if=../${WOOF_OUTPUT}/${PUPIMG} of=${SDDEVICE} bs=4M #120704 added bs=4M
  if [ $? -ne 0 ];then
   echo "Sorry, operation failure. Aborting script."
   exit 1
  fi
  sync
 fi # if WRITE_SD

 if [ "$COMPRESS" != 'none' ]; then
 rm -f ../${WOOF_OUTPUT}/${PUPIMG}
 fi

 if [ "$WRITE_SD" = "yes" ];then
 #update desktop drive icons. note, this is also done in /usr/sbin/bootflash, puppyinstaller, gparted_shell...
 #/tmp/pup_event_frontend_block_request is used in /sbin/pup_event_frontend_d to refresh drv...
 THEDRIVE="`echo -n "$SDDEVICE" | cut -f 3 -d '/'`"
 echo "$THEDRIVE" > /tmp/pup_event_frontend_block_request

 #120510...
 echo "If the SD card currently plugged in is bigger than the image, for example
you have a 4GB card and used a 1GB image, optionally now you may increase the
${SDFS2} partition to fill the remaining space -- this is for your own use."
 echo -n "ENTER only to decline: "
 read makebig
 if [ "$makebig" != "" ];then
  if [ "`which gparted`" = "" ];then
   echo "ERROR, gparted not installed!!!"
  else
   gparted $SDDEVICE
   sync
   echo
   echo "Checking the ${SDFS2} filesystem..."
   fsck.${SDFS2} -p ${SDDEVICE}2
   sync
   echo "$THEDRIVE" > /tmp/pup_event_frontend_block_request
  fi
 fi
 fi # if WRITE_SD

fi

cd $WKGDIR

#now do the devx...
echo
echo -n "Hit ENTER to build the 'devx' SFS file, any other key to exit: "
read dodevx
[ "$dodevx" != "" ] && exit
echo
echo "Building ${DEVXSFS}..."

echo " building sandbox3/devx ..."
echo "$PKGS_SPECS_TABLE" | grep '^yes' | cut -f 2 -d '|' | sed -e 's%$%_DEV%' > /tmp/ALLGENNAMESD
rm -f ./${WOOF_OUTPUT}/${DEVXSFS} 2>/dev/null #100911
for ONEDEV in `ls -1 packages-${DISTRO_FILE_PREFIX} | grep '_DEV$' | tr '\n' ' '`
do
 if grep -q -m1 "^$ONEDEV" /tmp/ALLGENNAMESD ;then
  cp -a --remove-destination packages-${DISTRO_FILE_PREFIX}/${ONEDEV}/* sandbox3/devx/
  sync
 fi
done
rm -f /tmp/ALLGENNAMESD
sync

#earlier above i moved all invalid symlinks into the devx module, yeah but i
#think should delete them if they really point nowhere...
echo " Deleting really invalid symlinks in devx..."
mkdir layer_top
if [ "$LAYER_TYPE" = 'overlay' ]; then
	mkdir overlay_workdir
	mount -t overlay overlay -olowerdir=sandbox3/rootfs-complete,upperdir=sandbox3/devx,workdir=overlay_workdir layer_top
else
	mount -t aufs -o udba=reval,diropq=w,dirs=sandbox3/devx=rw:sandbox3/rootfs-complete=ro layerfs layer_top
fi

if [ "$WOOF_HOSTARCH" = "$WOOF_TARGETARCH" ] ; then
	dirs=$(ls -d layer_top/* | sed 's|layer_top||' | grep -vE '/dev/|/proc/|/sys/') #|/initrd/|/tmp/|/var/|/run/|/mnt/
	chroot layer_top find -L $dirs -type l -delete
else
	#do it without chroot...
	find layer_top/ -type l | sed -e '\%/dev/%d' -e '\%/proc/%d' -e '\%/usr/share/icons/%d' | \
	while read ONESYMLINK ; do
	  xONESYMLINK="${ONESYMLINK#layer_top}" #sed -e 's/^layer_top//'`
	  LINKTO="`readlink "layer_top${xONESYMLINK}"`"
	  [ -e "layer_top${LINKTO}" ] && continue #absolute path
	  UPONE=${xONESYMLINK%/*}        #UPONE="`dirname "$xONESYMLINK"`"
	  [ "$UPONE" = "" ] && UPONE='/' #empty -> '/'
	  [ -e "layer_top${UPONE}/${LINKTO}" ] && continue #relative path
	  echo " $ONESYMLINK"
	  rm -f "$ONESYMLINK"
	done
fi
sync  ;  umount layer_top  ;  rmdir layer_top

###HACK###
if [ "$(echo "$PKGS_SPECS_TABLE" | grep '^yes|python|' | grep 'exe>dev')" != "" ];then #121022
 [ -e sandbox3/devx/usr/bin/python2.5 ] && ln -s python2.5 sandbox3/devx/usr/bin/python 2>/dev/null
 [ -e sandbox3/devx/usr/bin/python2.6 ] && ln -s python2.6 sandbox3/devx/usr/bin/python 2>/dev/null
 [ -e sandbox3/devx/usr/bin/python2.7 ] && ln -s python2.7 sandbox3/devx/usr/bin/python 2>/dev/null
fi
 rm -f sandbox3/devx/usr/lib${lsuffix}/mozilla/plugins/* #100407 maybe .a, .la files in here.
###END HACK###

#v424 no, i have needed docs in usr/share/doc...
#w003 there's docs here, move them out...
rm -rf packages-${DISTRO_FILE_PREFIX}/devx_DOC 2>/dev/null
mkdir -p packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share
#mv sandbox3/devx/usr/share/doc packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share/ 2>/dev/null
mv sandbox3/devx/usr/share/doc-base packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share/ 2>/dev/null
mv sandbox3/devx/usr/share/man packages-${DISTRO_FILE_PREFIX}/devx_DOC/usr/share/ 2>/dev/null

#100831 hack, this symlink needed...
if [ -d sandbox3/devx/usr/X11R7/include/xorg ];then
 [ ! -e sandbox3/devx/usr/include/xorg ] && ln -s ../X11/include/xorg sandbox3/devx/usr/include/xorg
fi

#100622 remove overhead of this script running every bootup...
mkdir -p sandbox3/devx/etc/profile.d
rm -f sandbox3/devx/etc/profile.d/pkgconfig* 2>/dev/null
PKG_CONFIG_PATH="`find sandbox3/devx/usr/lib sandbox3/devx/usr/X11R7/lib sandbox3/devx/opt sandbox3/devx/usr/local/lib -type d -name pkgconfig | sed -e 's%sandbox3/devx%%' | tr '\n' ':'`"
echo "export PKG_CONFIG_PATH='${PKG_CONFIG_PATH}'" > sandbox3/devx/etc/profile.d/pkgconfig

#maybe stray /install dir from slackware pkgs...
rm -rf sandbox3/devx/install 2>/dev/null
[ -f sandbox3/devx/pet.specs ] && rm -f sandbox3/devx/pet.specs #w478
#another slackware hack 131124
[ -x sandbox3/devx/usr/bin/strings-GNU ] && mv sandbox3/devx/usr/bin/strings-GNU sandbox3/devx/usr/bin/strings
sync

#110429 see above, think want glibc scsi headers in usr/include/scsi...
if [ -d sandbox3/devx/usr/include/scsi-GLIBC ];then
 #probably have kernel scsi headers in usr/include/scsi, fix...
 cp -a -f sandbox3/devx/usr/include/scsi-GLIBC/* sandbox3/devx/usr/include/scsi/
fi

# 151019 - delete duplicate symlinks
echo "deleting duplicate symlinks"
find sandbox3/devx -type l | while read ONESYMLINK
do # if the symlink exists in sandbox3/rootfs-complete we delete it
 ESYMLINK=${ONESYMLINK//devx/rootfs-complete}
 [ -h "$ESYMLINK" ] && echo -n "$ONESYMLINK " && rm -f "$ONESYMLINK"
done
sync
# do same for duplicates in /etc
echo -e "\ndeleting duplicate entries in /etc"
find sandbox3/devx/etc -type f | while read ONEDUPE
do
 EDUPE=${ONEDUPE//devx/rootfs-complete}
 [ -f "$EDUPE" ] && echo -n "$ONEDUPE " && rm -f "$ONEDUPE"
done
sync

echo -e "\ncleaning out whiteouts"
clean_out_whiteouts $sandbox3/devx # _00func

echo "Now creating ${DEVXSFS} ..."
${MKSQUASHFS} sandbox3/devx ./${WOOF_OUTPUT}/${DEVXSFS} ${SFSCOMP} #100911 110713
sync
chmod 644 ./${WOOF_OUTPUT}/${DEVXSFS}
CUR_DIR="$PWD"
cd ./${WOOF_OUTPUT}
md5sum ${DEVXSFS} > ${DEVXSFS}.md5.txt #100911
cd "$CUR_DIR"
sync
echo "...done"

echo -e "\nScript finished."
[ "$WOOF_GUI" ] && { echo -n "Press ENTER key to exit: " ; read zzz ; }

###END###
